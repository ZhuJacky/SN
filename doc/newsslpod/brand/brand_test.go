package brand

import (
	"crypto/sha1"
	"fmt"
	"testing"

	"mysslee_qcloud/utils/certutils"

	log "github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
)

var GDCA = `-----BEGIN CERTIFICATE-----
MIIFiDCCA3CgAwIBAgIIfQmX/vBH6nowDQYJKoZIhvcNAQELBQAwYjELMAkGA1UE
BhMCQ04xMjAwBgNVBAoMKUdVQU5HIERPTkcgQ0VSVElGSUNBVEUgQVVUSE9SSVRZ
IENPLixMVEQuMR8wHQYDVQQDDBZHRENBIFRydXN0QVVUSCBSNSBST09UMB4XDTE0
MTEyNjA1MTMxNVoXDTQwMTIzMTE1NTk1OVowYjELMAkGA1UEBhMCQ04xMjAwBgNV
BAoMKUdVQU5HIERPTkcgQ0VSVElGSUNBVEUgQVVUSE9SSVRZIENPLixMVEQuMR8w
HQYDVQQDDBZHRENBIFRydXN0QVVUSCBSNSBST09UMIICIjANBgkqhkiG9w0BAQEF
AAOCAg8AMIICCgKCAgEA2aMW8Mh0dHeb7zMNOwZ+Vfy1YI92hhJCfVZmPoiC7XJj
Dp6L3TQsAlFRwxn9WVSEyfFrs0yw6ehGXTjGoqcuEVe6ghWinI9tsJlKCvLriXBj
TnnEt1u9ol2x8kECK62pOqPseQrsXzrj/e+APK00mxqriCZ7VqKChh/rNYmDf1+u
KU49tm7srsHwJ5uu4/Ts765/94Y9cnrrpftZTqfrlYwiOXnhLQiPzLyRuEH3FMEj
qcOtmkVEs7LXLM3GKeJQEK5cy4KOFxg2fZfmiJqwTTQJ9Cy5WmYqsBebnh52nUpm
MUHfP/vFBu8btn4aRjb3ZGM74zkYI+dndRTVdVeSN72+ahsmUPI2JgaQxXABZG12
ZuGR224HwGGALrIuL4xwp9E7PLOR5G62xDtw8mySlwnNR30YwPO7ng/Wi64HtloP
zgsMR6flPri9fcebNaBhlzpBdRfMK5Z3KpIhHtmVdiBnaM8Nvd/WHwlqmuLMc3Gk
L30SgLdTMEZeS1SZD2fJpcjyIMGC7J0R38IC+xo70e0gmu9lZJIQDSri3nDxGGeC
jGHeuLzRL5z7D9Ar7Rt2ueQ5Vfj4oR24qoAATILnsn8JuLwwoC8N9VKejveSswoA
HQBUlwbgsQfZxw9cZX08bVlX5O2ljelAU58VS6Bx9hoh49pwBiFYFIeFd3mqgnkC
AwEAAaNCMEAwHQYDVR0OBBYEFOLJQJ9NzuiaoXzPDj9lxSmIahlRMA8GA1UdEwEB
/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4ICAQDRSVfg
p8xoWLoBDysZzY2wYUWsEe1jUGn4H3++Fo/9nesLqjJHdtJnJO29fDMylyrHBYZm
DRd9FBUb1Ov9H5r2XpdptxolpAqzkT9fNqyL7FeoPueBihhXOYV0GkLH6VsTX4/5
COmSdI31R9KrO9b7eGZONn356ZLpBN79SWP8bfsUcZNnL0dKt7n/HipzcEYwv1ry
L3ml4Y0M2fmyYzeMN2WFcGpcWwlyua1jPLHd+PwyvzeG5LuOmCd+uh8W4XAR8gPf
JWIyJyYYMoSf/wA6E7qaTfRPuBRwIrHKK5DOKcFw9C+df/KQHtZa37dG/OaG+svg
IHZ6uqbL9XzeYqWxi+7egmaKTjowHz+Ay60nugxe19CxVsp3cbK1daFQqUBDF8Io
2c9Si1vIY9RCPqAzekYu9wogRlR+ak8x8YF+QnQ4ZXMn7sZ8uI7XpTrXmKGcjBBV
09tL7ECQ8s1uV9JiDnxXk7Gnbc2dg7sq5+W2O3FYrf3RRbxake5TFW/TRQl1brqQ
XR4EzzffHqhmsYzmIGrv/EhOdJhCrylvLmrH+33RZjEizIYAfmaDDEL0vTSSwxrq
T8p+ck0LcIymSLumoRT2+1hEmRSuqguTaaApJUqlyyvdimYHFngVV3Eb7PVHhPOe
MTd61X8kreS8/f3MboPoDKi3QWwH3b08hpcv0g==
-----END CERTIFICATE-----`

func TestVerifyRootInBrand(t *testing.T) {
	assert := assert.New(t)
	var ok bool

	certs, _ := certutils.GenCertsFromPem([]byte(GDCA))
	roots := certBrandStore.GetTrustRoots()

	log.Infof("len root :%v", len(roots))
	hash := fmt.Sprintf("%X", sha1.Sum(certs[0].Raw))
	log.Infof("hash:%v", hash)
	for _, r := range roots {
		if r.Hash == hash {
			ok = true
			break
		}
	}
	assert.Equal(true, ok)
}

// Makefile 使用
func TestUpdateCAChainInfo(t *testing.T) {
	//1.pg中的证书同步到sqlite中
	// syncPgToSqlite()
	//2. 同步sqlite中新增的证书到pg中
	//syncSqliteToPg()

	//3. 更新TrustCAs.lock中的hash
	// updateTrustCAsLock()
	//4. 更新数据 并标记need_rebuild
	updateConfig()
	//GenerateCertBrandsCache()

}

func TestGetCABrands(t *testing.T) {
	assert := assert.New(t)
	_, _, err := loadCABrand()
	assert.Nil(err)
}

//Root :294, Intermediates :858
func TestDivRootsAndIntermediaters(t *testing.T) {
	assert := assert.New(t)

	brands, _, err := loadCABrand()
	assert.Nil(err)
	roots, intermediates, err := divRootsAndIntermediates(brands)
	assert.Nil(err)
	if err == nil {
		assert.NotNil(roots)
		assert.NotNil(intermediates)
		log.Printf("root len:%v, trustCAs len:%v", len(roots), len(intermediates))
	}
}

var expired = `-----BEGIN CERTIFICATE-----
MIIFSzCCBDOgAwIBAgIQSueVSfqavj8QDxekeOFpCTANBgkqhkiG9w0BAQsFADCB
kDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G
A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxNjA0BgNV
BAMTLUNPTU9ETyBSU0EgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBD
QTAeFw0xNTA0MDkwMDAwMDBaFw0xNTA0MTIyMzU5NTlaMFkxITAfBgNVBAsTGERv
bWFpbiBDb250cm9sIFZhbGlkYXRlZDEdMBsGA1UECxMUUG9zaXRpdmVTU0wgV2ls
ZGNhcmQxFTATBgNVBAMUDCouYmFkc3NsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQAD
ggEPADCCAQoCggEBAMIE7PiM7gTCs9hQ1XBYzJMY61yoaEmwIrX5lZ6xKyx2PmzA
S2BMTOqytMAPgLaw+XLJhgL5XEFdEyt/ccRLvOmULlA3pmccYYz2QULFRtMWhyef
dOsKnRFSJiFzbIRMeVXk0WvoBj1IFVKtsyjbqv9u/2CVSndrOfEk0TG23U3AxPxT
uW1CrbV8/q71FdIzSOciccfCFHpsKOo3St/qbLVytH5aohbcabFXRNsKEqveww9H
dFxBIuGa+RuT5q0iBikusbpJHAwnnqP7i/dAcgCskgjZjFeEU4EFy+b+a1SYQCeF
xxC7c3DvaRhBB0VVfPlkPz0sw6l865MaTIbRyoUCAwEAAaOCAdUwggHRMB8GA1Ud
IwQYMBaAFJCvajqUWgvYkOoSVnPfQ7Q6KNrnMB0GA1UdDgQWBBSd7sF7gQs6R2lx
GH0RN5O8pRs/+zAOBgNVHQ8BAf8EBAMCBaAwDAYDVR0TAQH/BAIwADAdBgNVHSUE
FjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTwYDVR0gBEgwRjA6BgsrBgEEAbIxAQIC
BzArMCkGCCsGAQUFBwIBFh1odHRwczovL3NlY3VyZS5jb21vZG8uY29tL0NQUzAI
BgZngQwBAgEwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL2NybC5jb21vZG9jYS5j
b20vQ09NT0RPUlNBRG9tYWluVmFsaWRhdGlvblNlY3VyZVNlcnZlckNBLmNybDCB
hQYIKwYBBQUHAQEEeTB3ME8GCCsGAQUFBzAChkNodHRwOi8vY3J0LmNvbW9kb2Nh
LmNvbS9DT01PRE9SU0FEb21haW5WYWxpZGF0aW9uU2VjdXJlU2VydmVyQ0EuY3J0
MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5jb21vZG9jYS5jb20wIwYDVR0RBBww
GoIMKi5iYWRzc2wuY29tggpiYWRzc2wuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQBq
evHa/wMHcnjFZqFPRkMOXxQhjHUa6zbgH6QQFezaMyV8O7UKxwE4PSf9WNnM6i1p
OXy+l+8L1gtY54x/v7NMHfO3kICmNnwUW+wHLQI+G1tjWxWrAPofOxkt3+IjEBEH
fnJ/4r+3ABuYLyw/zoWaJ4wQIghBK4o+gk783SHGVnRwpDTysUCeK1iiWQ8dSO/r
ET7BSp68ZVVtxqPv1dSWzfGuJ/ekVxQ8lEEFeouhN0fX9X3c+s5vMaKwjOrMEpsi
8TRwz311SotoKQwe6Zaoz7ASH1wq7mcvf71z81oBIgxw+s1F73hczg36TuHvzmWf
RwxPuzZEaFZcVlmtqoq8
-----END CERTIFICATE-----`

var normal = `-----BEGIN CERTIFICATE-----
MIIFyDCCBLCgAwIBAgIQL+zOTGJbRDujAYL+Ju6BDDANBgkqhkiG9w0BAQsFADCB
lzELMAkGA1UEBhMCQ04xJTAjBgNVBAoTHFRydXN0QXNpYSBUZWNobm9sb2dpZXMs
IEluYy4xHzAdBgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxHTAbBgNVBAsT
FERvbWFpbiBWYWxpZGF0ZWQgU1NMMSEwHwYDVQQDExhUcnVzdEFzaWEgRFYgU1NM
IENBIC0gRzUwHhcNMTYwODMxMDAwMDAwWhcNMTcwODMxMjM1OTU5WjAXMRUwEwYD
VQQDDAwqLmRlZXB6ei5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQCZQ35644/EaC0Ks2tHNua1dculQR0WVidVGaGgbrSfebVFQWpr/A3173mhWIcq
td9TNTpwaeyYdnRVyWz9ZBntnydnonpmuNEBJrzwjWkXKsqUL0UXNkX/wZ+HTOQ/
s+niE2X6AyQsUhW54U00+tAuV029r3lpaiaq0UnzT/dGCFXY0v8N1PRcuaS9ZPs0
Ui7l7XHB+XNoDh3kOvlLG3Z16GeFdKwrzJMHwMKwSAHvdLkSj1iUWTa50emX/qH0
xXxO74sDcPYpeP4gFMnCf2FoSbd5eoSgA/6sflQPfJyh1zg97//m0lpYJRlyBZ0U
N/z2ZhogCwToL2gyP9/ivbKDAgMBAAGjggKNMIICiTAjBgNVHREEHDAaggwqLmRl
ZXB6ei5jb22CCmRlZXB6ei5jb20wCQYDVR0TBAIwADBhBgNVHSAEWjBYMFYGBmeB
DAECATBMMCMGCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2IuY29tL2NwczAlBggr
BgEFBQcCAjAZDBdodHRwczovL2Quc3ltY2IuY29tL3JwYTAfBgNVHSMEGDAWgBRt
WMd/GufhPy6mjJc1Qrv00zisPzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYI
KwYBBQUHAwEGCCsGAQUFBwMCMIGbBggrBgEFBQcBAQSBjjCBizA8BggrBgEFBQcw
AYYwaHR0cDovL3RydXN0YXNpYTItb2NzcC5kaWdpdGFsY2VydHZhbGlkYXRpb24u
Y29tMEsGCCsGAQUFBzAChj9odHRwOi8vdHJ1c3Rhc2lhMi1haWEuZGlnaXRhbGNl
cnR2YWxpZGF0aW9uLmNvbS90cnVzdGFzaWFnNS5jcnQwggEEBgorBgEEAdZ5AgQC
BIH1BIHyAPAAdgDd6x0reg1PpiCLga2BaHB+Lo6dAdVciI09EcTNtuy+zAAAAVbf
IVw3AAAEAwBHMEUCIEAjEfQw6guzwAUvOg7odMLsEt+msEBdEL3nPBU3bdgdAiEA
+XbyaL/WjeB+K6ICRvH7caki4gBbxGHDrsCcrhIpEDAAdgCkuQmQtBhYFIe7E6LM
Z3AKPDWYBPkb37jjd80OyA3cEAAAAVbfIV3DAAAEAwBHMEUCIAkPqq/ZORARqlYn
8th65SLQM4f/10428QJSfVn6qn+sAiEAhotgQvwB5w2NtZlCpFHL8ESSJTjVu1YN
FVvemugJ788wDQYJKoZIhvcNAQELBQADggEBAD2cLVIL39x+wGKgYA68MmRPKweg
tiniflJU9EBssG3ry6apc014wvh/fGS02uQMkd+ZiyjwAExuNISqNlQ2NaEbVfKR
kgR8kka2fmaTlYASWkHWPAiLq28kFQro2mXBurZkb9WQWTgrCrYRX2y4UJ7fvrjw
q+VHgwmS/vtEoB7gGC1gM5oIiXdalJlqxc2OJ1NW7O3SpM/EoGYD+M6WPianeecY
w37BDCiWlbX/+6PcRk3v8D+2GTdhjn5KUJH+Tbqi5bNSkCoxF4eFY6yiS1MDFJnp
Yv+CHlHLNhqR7g59URv1+QCBgT7XHuBjNVtq2lX608W9X2mTQH0SRucqRUc=
-----END CERTIFICATE-----`

func TestIsValid(t *testing.T) {
	assert := assert.New(t)
	certs, ok := certutils.GenCertsFromPem([]byte(expired))
	assert.Equal(true, ok)
	if ok {
		valid := certutils.IsExpired(certs[0])
		assert.Equal(false, valid)
	}

	certs, ok = certutils.GenCertsFromPem([]byte(normal))
	assert.Equal(true, ok)
	if ok {
		valid := certutils.IsExpired(certs[0])
		assert.Equal(true, valid)
	}
}

func TestCheckIntermediatesCheckChain(t *testing.T) {
	assert := assert.New(t)

	brands, _, err := loadCABrand()
	assert.Nil(err)
	roots, intermediates, err := divRootsAndIntermediates(brands)
	assert.Nil(err)
	if err == nil {
		assert.NotNil(intermediates)
		assert.NotNil(roots)

		checkIntermediatesCheckChain(roots, intermediates)

		assert.True(len(intermediates[0].SignFrom) > 0)
	}
}

func TestInit(t *testing.T) {
	assert := assert.New(t)

	roots, intermediates := certBrandStore.GetRootsAndCAs()

	assert.Equal(294, len(roots))
	assert.Equal(858, len(intermediates))
	assert.True(len(roots[0].SignFrom) == 0)
	assert.True(len(intermediates[0].SignFrom) > 0)
}

func TestGetBlackListPins(t *testing.T) {
	list := getBlackListPins()
	log.Infof("list len:%v", len(list))
}

var certPEMs = []string{
	`-----BEGIN CERTIFICATE-----
MIIF9TCCBN2gAwIBAgIMbMVEcAR41+6SInvJMA0GCSqGSIb3DQEBCwUAMGYxCzAJ
BgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMTwwOgYDVQQDEzNH
bG9iYWxTaWduIE9yZ2FuaXphdGlvbiBWYWxpZGF0aW9uIENBIC0gU0hBMjU2IC0g
RzIwHhcNMTcwNDI3MDcyMjAyWhcNMTgwNDI4MDcxMDI3WjB5MQswCQYDVQQGEwJD
TjERMA8GA1UECBMIWmhlSmlhbmcxETAPBgNVBAcTCEhhbmdaaG91MS0wKwYDVQQK
EyRBbGliYWJhIChDaGluYSkgVGVjaG5vbG9neSBDby4sIEx0ZC4xFTATBgNVBAMM
DCouYWxpeXVuLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOP3T1+Yeq0i
ZRvD3V97yaaR29B1S3hZN0AjlyXdK6WMRySznFYw0rTPzzbZunMHyVzxu/1BnxXq
cd0wUJ1ahQWjggNZMIIDVTAOBgNVHQ8BAf8EBAMCA4gwgaAGCCsGAQUFBwEBBIGT
MIGQME0GCCsGAQUFBzAChkFodHRwOi8vc2VjdXJlLmdsb2JhbHNpZ24uY29tL2Nh
Y2VydC9nc29yZ2FuaXphdGlvbnZhbHNoYTJnMnIxLmNydDA/BggrBgEFBQcwAYYz
aHR0cDovL29jc3AyLmdsb2JhbHNpZ24uY29tL2dzb3JnYW5pemF0aW9udmFsc2hh
MmcyMFYGA1UdIARPME0wQQYJKwYBBAGgMgEUMDQwMgYIKwYBBQUHAgEWJmh0dHBz
Oi8vd3d3Lmdsb2JhbHNpZ24uY29tL3JlcG9zaXRvcnkvMAgGBmeBDAECAjAJBgNV
HRMEAjAAMEkGA1UdHwRCMEAwPqA8oDqGOGh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5j
b20vZ3MvZ3Nvcmdhbml6YXRpb252YWxzaGEyZzIuY3JsMIIBkQYDVR0RBIIBiDCC
AYSCDCouYWxpeXVuLmNvbYIMKi5hbGljZG4uY29tghIqLmFsaW5rLmFsaXl1bi5j
b22CDiouYWxpeXVuY3MuY29tghAqLmFwbS5hbGl5dW4uY29tghAqLmFwcC5hbGl5
dW4uY29tghcqLmJhc2Uuc2h1anUuYWxpeXVuLmNvbYIUKi5jb25zb2xlLmFsaXl1
bi5jb22CESouZGF0YS5hbGl5dW4uY29tghQqLmRhdGFhcGkuYWxpeXVuLmNvbYIS
Ki5kYXRhdi5hbGl5dW4uY29tghEqLmRpdHUuYWxpeXVuLmNvbYIdKi5mZWVkYmFj
ay5jb25zb2xlLmFsaXl1bi5jb22CCSouZ2Vpbi5jboISKi5tZWRpYS5hbGl5dW4u
Y29tghAqLm9ucy5hbGl5dW4uY29tghAqLm9zZS5hbGl5dW4uY29tghIqLnNodWp1
LmFsaXl1bi5jb22CDyoudHYuYWxpeXVuLmNvbYIMYWxpeXVuY3MuY29tggphbGl5
dW4uY29tMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQU
EOmalk6baagWqmVebCWk0KnrxxowHwYDVR0jBBgwFoAUlt5h8b0cFilTHMDMfTuD
AEDmGnwwDQYJKoZIhvcNAQELBQADggEBAATSTZO91CJkL4uurv6zutjFIjsqLP71
9U5iFMMA3Jvbocs+yHmGf1n6pv8q65C5ltv2hUxnLSaFZNDEPPcRdTzP6uOT+8DX
nX55YQiiX+OhLNKWf0QZqCJ8rSyv6wdNbfTxyQ4IdKDftcl2t9vr9rJ2uiZNxMY1
wS02bLZaqcr7+m5EQNl92cFoTMuiwlgrR2oKoh/jhjBzCDm0D1ZMq8+Vv+F61WAS
ysJPkpyrVPVqSYHTkeFoOp8MQGTKddIqvKC7l4tMTFzDfywbHXaCOh0cocLBWY2d
d9slrUMFZk7io7VTIusmb9Z/H5BcPE2Xlr+Mmq5wkyCTXTT77yZONCY=
-----END CERTIFICATE-----`,
	`-----BEGIN CERTIFICATE-----
MIIFYjCCBEqgAwIBAgIQTEzYoPxP6q4VVKh/CQ7ahzANBgkqhkiG9w0BAQsFADCB
yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL
ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp
U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW
ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0
aG9yaXR5IC0gRzUwHhcNMTYwNjA3MDAwMDAwWhcNMjYwNjA2MjM1OTU5WjCBlDEL
MAkGA1UEBhMCVVMxHTAbBgNVBAoTFFN5bWFudGVjIENvcnBvcmF0aW9uMR8wHQYD
VQQLExZTeW1hbnRlYyBUcnVzdCBOZXR3b3JrMR0wGwYDVQQLExREb21haW4gVmFs
aWRhdGVkIFNTTDEmMCQGA1UEAxMdU3ltYW50ZWMgQmFzaWMgRFYgU1NMIENBIC0g
RzEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCkN8hYylrZCZihZgN2
5FsiT+qfOv8rKi3MbRIsZ2TUqsS5e1eDLPXI8IP4XXUZLWt9hlqmDpqiZa5mLSBj
KDX3iWq/FaOc8l1AsbeOhr9ZESCoEorqm6S9wAL+HX7hLY/7p03SSNSAO+/gr2o7
ciWu3jhd+H4dzGNNDN0nCuRIOX7rTGYI5mOb8QWJRC6H/3MlUYpBt9VV+l2FVNhB
LJuofF3TNJojVHximZnTEkybg/r9AZc2TkDHJX1BA6rNjXG8l5iSCL9ICJCBUPB5
z/s3hQBQkOALXN88QTIrlj53XpWpqxYdQJrOFbtWi18WW3ZAnGAscd8vZ5UIg3KL
AmoBAgMBAAGjggF2MIIBcjASBgNVHRMBAf8ECDAGAQH/AgEAMC8GA1UdHwQoMCYw
JKAioCCGHmh0dHA6Ly9zLnN5bWNiLmNvbS9wY2EzLWc1LmNybDAOBgNVHQ8BAf8E
BAMCAQYwLgYIKwYBBQUHAQEEIjAgMB4GCCsGAQUFBzABhhJodHRwOi8vcy5zeW1j
ZC5jb20wYQYDVR0gBFowWDBWBgZngQwBAgEwTDAjBggrBgEFBQcCARYXaHR0cHM6
Ly9kLnN5bWNiLmNvbS9jcHMwJQYIKwYBBQUHAgIwGRoXaHR0cHM6Ly9kLnN5bWNi
LmNvbS9ycGEwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCkGA1UdEQQi
MCCkHjAcMRowGAYDVQQDExFTeW1hbnRlY1BLSS0yLTU1NTAdBgNVHQ4EFgQUXGGe
sHZBqWqqQwvhx24wKW6xzTYwHwYDVR0jBBgwFoAUf9Nlp8Ld7LvwMAnzQzn6Aq8z
MTMwDQYJKoZIhvcNAQELBQADggEBAGHqRXEvjeE/CpuVSPHyPKJYFsqWxP/a4quX
cRCRsy+ki4EP8qT7NfPnkEogxZvlMctHsWgdtTbp9ShXbqCnqXPCw575BZH2rEKN
xI30CWr6U47n4h2hSnaJxJeeA+xKsA1Vk4v8eLu7xwRlBwhZEsYNFAVpD3YEToek
H877QzZrZ6EdG/3Vg6sdtHDQ4i/U87syTmyM2l8vXOGIZDd1Wr6dqee2FtCfhvAc
WMbvh/J6sBOHMq0Vn5G8Tp6iUwsRlY1z7LaQKAlnlOiiZVhhe+1gvzJBHC0t+Hr2
2YHwaoKDLhSB0F/gGkziNQ+py1hFne4MEOuvzOxJpjn0+wRIbBk=
-----END CERTIFICATE-----`,
	`-----BEGIN CERTIFICATE-----
MIIEaTCCA1GgAwIBAgILBAAAAAABRE7wQkcwDQYJKoZIhvcNAQELBQAwVzELMAkG
A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv
b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xNDAyMjAxMDAw
MDBaFw0yNDAyMjAxMDAwMDBaMGYxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
YWxTaWduIG52LXNhMTwwOgYDVQQDEzNHbG9iYWxTaWduIE9yZ2FuaXphdGlvbiBW
YWxpZGF0aW9uIENBIC0gU0hBMjU2IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IB
DwAwggEKAoIBAQDHDmw/I5N/zHClnSDDDlM/fsBOwphJykfVI+8DNIV0yKMCLkZc
C33JiJ1Pi/D4nGyMVTXbv/Kz6vvjVudKRtkTIso21ZvBqOOWQ5PyDLzm+ebomchj
SHh/VzZpGhkdWtHUfcKc1H/hgBKueuqI6lfYygoKOhJJomIZeg0k9zfrtHOSewUj
mxK1zusp36QUArkBpdSmnENkiN74fv7j9R7l/tyjqORmMdlMJekYuYlZCa7pnRxt
Nw9KHjUgKOKv1CGLAcRFrW4rY6uSa2EKTSDtc7p8zv4WtdufgPDWi2zZCHlKT3hl
2pK8vjX5s8T5J4BO/5ZS5gIg4Qdz6V0rvbLxAgMBAAGjggElMIIBITAOBgNVHQ8B
Af8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUlt5h8b0cFilT
HMDMfTuDAEDmGnwwRwYDVR0gBEAwPjA8BgRVHSAAMDQwMgYIKwYBBQUHAgEWJmh0
dHBzOi8vd3d3Lmdsb2JhbHNpZ24uY29tL3JlcG9zaXRvcnkvMDMGA1UdHwQsMCow
KKAmoCSGImh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5uZXQvcm9vdC5jcmwwPQYIKwYB
BQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwOi8vb2NzcC5nbG9iYWxzaWduLmNv
bS9yb290cjEwHwYDVR0jBBgwFoAUYHtmGkUNl8qJUC99BM00qP/8/UswDQYJKoZI
hvcNAQELBQADggEBAEYq7l69rgFgNzERhnF0tkZJyBAW/i9iIxerH4f4gu3K3w4s
32R1juUYcqeMOovJrKV3UPfvnqTgoI8UV6MqX+x+bRDmuo2wCId2Dkyy2VG7EQLy
XN0cvfNVlg/UBsD84iOKJHDTu/B5GqdhcIOKrwbFINihY9Bsrk8y1658GEV1BSl3
30JAZGSGvip2CTFvHST0mdCF/vIhCPnG9vHQWe3WVjwIKANnuvD58ZAWR65n5ryA
SOlCdjSXVWkkDoPWoC209fN5ikkodBpBocLTJIg1MGCUF7ThBCIxPTsvFwayuJ2G
K1pp74P1S8SqtCr4fKGxhZSM9AyHDPSsQPhZSZg=
-----END CERTIFICATE-----`,
	`-----BEGIN CERTIFICATE-----
MIIGhjCCBiygAwIBAgIQE/jgnug+L3Cfs7RK+IhsQzAKBggqhkjOPQQDAjB/MQsw
CQYDVQQGEwJVUzEdMBsGA1UEChMUU3ltYW50ZWMgQ29ycG9yYXRpb24xHzAdBgNV
BAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxMDAuBgNVBAMTJ1N5bWFudGVjIENs
YXNzIDMgRUNDIDI1NiBiaXQgRVYgQ0EgLSBHMjAeFw0xNzA5MTgwMDAwMDBaFw0x
ODEyMTcyMzU5NTlaMIH2MRMwEQYLKwYBBAGCNzwCAQMTAkNOMRkwFwYLKwYBBAGC
NzwCAQITCFNoYW5naGFpMRYwFAYLKwYBBAGCNzwCAQETBVh1aHVpMR0wGwYDVQQP
ExRQcml2YXRlIE9yZ2FuaXphdGlvbjEbMBkGA1UEBRMSOTEzMTAxMDQwNjYwNDMx
OTM5MQswCQYDVQQGEwJDTjESMBAGA1UEBwwJ5LiK5rW35biCMTMwMQYDVQQKDCrk
uprmlbDkv6Hmga/np5HmioDvvIjkuIrmtbfvvInmnInpmZDlhazlj7gxGjAYBgNV
BAMMEXd3dy50cnVzdGFzaWEuY29tMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
hZUT9NYIECXvRom0Qp9EHN0/jQMCPnxDkWVnxib29ImOiAO3j/TP+pC9RA0vMwz/
lIJbohNv3rd7kvb6U/02faOCBBAwggQMMIIBMgYDVR0RBIIBKTCCASWCGXhuLS1p
aHE1NGlxdGVtNmIzdWZsenQuY26CCGh0dHBzLmNuggx3d3cuaHR0cHMuY26CDmFs
d2F5c29uc3NsLmNughJ3d3cuYWx3YXlzb25zc2wuY26CFnhuLS1qbHF5NGFqNzVk
NmYxYS5jb22CD20udHJ1c3Rhc2lhLmNvbYISbXBraS50cnVzdGFzaWEuY29tghZz
eW1hbnRlYy50cnVzdGFzaWEuY29tghZzc2xjbG91ZC50cnVzdGFzaWEuY29tghd0
cnVzdHNlYWwudHJ1c3Rhc2lhLmNvbYIRZWNjLnRydXN0YXNpYS5jb22CEXNzbC50
cnVzdGFzaWEuY29tghF3d3cudHJ1c3Rhc2lhLmNvbYINdHJ1c3Rhc2lhLmNvbTAJ
BgNVHRMEAjAAMA4GA1UdDwEB/wQEAwIHgDBvBgNVHSAEaDBmMFsGC2CGSAGG+EUB
BxcGMEwwIwYIKwYBBQUHAgEWF2h0dHBzOi8vZC5zeW1jYi5jb20vY3BzMCUGCCsG
AQUFBwICMBkMF2h0dHBzOi8vZC5zeW1jYi5jb20vcnBhMAcGBWeBDAEBMCsGA1Ud
HwQkMCIwIKAeoByGGmh0dHA6Ly9yZC5zeW1jYi5jb20vcmQuY3JsMB0GA1UdJQQW
MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAWgBRycjbGpzGeh4nHMn3s
OvWiZD94ejBXBggrBgEFBQcBAQRLMEkwHwYIKwYBBQUHMAGGE2h0dHA6Ly9yZC5z
eW1jZC5jb20wJgYIKwYBBQUHMAKGGmh0dHA6Ly9yZC5zeW1jYi5jb20vcmQuY3J0
MIIBgAYKKwYBBAHWeQIEAgSCAXAEggFsAWoAdwDd6x0reg1PpiCLga2BaHB+Lo6d
AdVciI09EcTNtuy+zAAAAV6ShHGjAAAEAwBIMEYCIQCsPr4l8frfTBQlnJCBCFEC
cZhpHaPEVC3xHtXEcPzyhwIhANqcnaa30V3GH+mxzbFvv1oQ4xAUSstuHnDr3VzY
7wALAHcApLkJkLQYWBSHuxOizGdwCjw1mAT5G9+443fNDsgN3BAAAAFekoRyGAAA
BAMASDBGAiEAsQ5ygfrX3lG1tqUFXvDaErS5rbhzfAUTemtAdQQQ2okCIQDi2xa4
cPNTFJ2qEKXOw78wBwegX9hiP+j4rLCYnwxMeQB2AO5Lvbd1zmC64UJpH6vhnmaj
D35fsHLYgwDEe4l6qP3LAAABXpKEc5sAAAQDAEcwRQIhAPdSYWxyOZ/jT6sGxpGs
uACNCsmdhotfd13wsnFQyJE/AiB8avVfNyXLXw6zxDJ469+CLTo2ezfJoc9bCxvp
op/TLTAKBggqhkjOPQQDAgNIADBFAiBioTzOccwRYHAFj8TV3WiWxJz8j1j9Q3Qz
umM1oCrGugIhANPtBotHRFTnCC3rA5htSD2RTYyCqtrZRtV2C9RiFtzT
-----END CERTIFICATE-----`,
	`-----BEGIN CERTIFICATE-----
MIIFxjCCBK6gAwIBAgIQdl7KU1texamBGKDYfxpq3TANBgkqhkiG9w0BAQsFADCB
lzELMAkGA1UEBhMCQ04xJTAjBgNVBAoTHFRydXN0QXNpYSBUZWNobm9sb2dpZXMs
IEluYy4xHzAdBgNVBAsTFlN5bWFudGVjIFRydXN0IE5ldHdvcmsxHTAbBgNVBAsT
FERvbWFpbiBWYWxpZGF0ZWQgU1NMMSEwHwYDVQQDExhUcnVzdEFzaWEgRFYgU1NM
IENBIC0gRzUwHhcNMTcwOTI1MDAwMDAwWhcNMTgwOTI1MjM1OTU5WjAUMRIwEAYD
VQQDDAlyYXplZW4ubWUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC2
35dj7yKu4rgDc2YTHNwNlaiMdoZ6LUBySjlFN5xGUi3QJgZR+Wbm11d2/BYl4V+H
2mFycx5RRgUqZk2875/QNRAFsWRxkXvSjaodOgntuxbt/LU8N2qVfqC5J1QHAfak
reW8lDqkCfMiV1Cbg2gXd3F30XytCdQCGQY3TkF5jojmX2hctldkodpujxErNGL4
EZoZb2wndxyDsJwJta2cV+U5hOkuidbakk5zwcvfi+crAXYmf1FnK0zTqQZBCL5O
EslWWagnsSgmau7A30nDghFledDb4h++9xOYSQdsq5ZrCWNj4Q+gYaf87mmx0W+2
hoJURW0DgzIGELu3mH4BAgMBAAGjggKOMIICijAjBgNVHREEHDAagglyYXplZW4u
bWWCDXd3dy5yYXplZW4ubWUwCQYDVR0TBAIwADBhBgNVHSAEWjBYMFYGBmeBDAEC
ATBMMCMGCCsGAQUFBwIBFhdodHRwczovL2Quc3ltY2IuY29tL2NwczAlBggrBgEF
BQcCAjAZDBdodHRwczovL2Quc3ltY2IuY29tL3JwYTAfBgNVHSMEGDAWgBRtWMd/
GufhPy6mjJc1Qrv00zisPzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB
BQUHAwEGCCsGAQUFBwMCMIGbBggrBgEFBQcBAQSBjjCBizA8BggrBgEFBQcwAYYw
aHR0cDovL3RydXN0YXNpYTItb2NzcC5kaWdpdGFsY2VydHZhbGlkYXRpb24uY29t
MEsGCCsGAQUFBzAChj9odHRwOi8vdHJ1c3Rhc2lhMi1haWEuZGlnaXRhbGNlcnR2
YWxpZGF0aW9uLmNvbS90cnVzdGFzaWFnNS5jcnQwggEFBgorBgEEAdZ5AgQCBIH2
BIHzAPEAdwDd6x0reg1PpiCLga2BaHB+Lo6dAdVciI09EcTNtuy+zAAAAV654Gjn
AAAEAwBIMEYCIQDylNdbpEDO9BL9vu5jM7Evcb/l1pDfn5NyChz8ITr1lgIhAP6g
N/GT7wjgok7OxnC3MgrZy/QPZ+4qrutPv0mD/n/mAHYApLkJkLQYWBSHuxOizGdw
Cjw1mAT5G9+443fNDsgN3BAAAAFeueBpIwAABAMARzBFAiBvvZROQjcJcDs+Jhe1
nQ2qKDG2P4Mg6UcZwFq18HSu8AIhAMO38dJRCFcMcWn4YS4nfdOocgPQBih9jmeY
DK5Y/Q5LMA0GCSqGSIb3DQEBCwUAA4IBAQC1UEQDza9A7ESSLgQHjzG7Fieux1P3
eFJC4vAS/wC70DieTboStXaW0XXI6jwRwSGg9QOJW98/ZPoERuI+pvJVm1E3BvE/
P+Fk52HuZRukhMzJ3XHMjcwz/DU6+PQXaDHgimTToP5R793r4b0Po6sKfp1cMEpM
pEmp+bRByU+fFyO3iWD3/GnVoSZaS4+KvNVQ2bOPaZF/YQ/4tMjDTrY6W1bPqywi
NAk/VGbzNnnSsDiciRvXHlLqOacWgINltlEp/26QiGamEAsGM5vi6jhp+7r9BYI1
Trgr4+obhge5J6NYLiZ71jfCShh+JAXrKm+u5PqJJLDJrNu9ZR8QJPfa
-----END CERTIFICATE-----`,
	`-----BEGIN CERTIFICATE-----
MIIFqTCCBU6gAwIBAgIQbAIJXOPt1k4hlaWL1NcwNTAKBggqhkjOPQQDAjCBkjEL
MAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
BxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxODA2BgNVBAMT
L0NPTU9ETyBFQ0MgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBDQSAy
MB4XDTE3MTAyODAwMDAwMFoXDTE4MDUwNjIzNTk1OVowajEhMB8GA1UECxMYRG9t
YWluIENvbnRyb2wgVmFsaWRhdGVkMSEwHwYDVQQLExhQb3NpdGl2ZVNTTCBNdWx0
aS1Eb21haW4xIjAgBgNVBAMTGXNzbDQwNTEzNi55dW5qaWFzdXNzbC5jb20wWTAT
BgcqhkjOPQIBBggqhkjOPQMBBwNCAARqkgJvXeCTgs/0+HBMneeCS1xVv2YqmqHX
NsG/P80OeObLmrBpW2usLH8IQmg1u6aoQxxcdasbJcxLQ8TXjI8ho4IDqzCCA6cw
HwYDVR0jBBgwFoAUQAlhZ/C8g3FP3hIILG/U1Ct2PZYwHQYDVR0OBBYEFFuv49Mg
cQsTBZpMrmSAuIf3d9Z4MA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0G
A1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBPBgNVHSAESDBGMDoGCysGAQQB
sjEBAgIHMCswKQYIKwYBBQUHAgEWHWh0dHBzOi8vc2VjdXJlLmNvbW9kby5jb20v
Q1BTMAgGBmeBDAECATBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLmNvbW9k
b2NhNC5jb20vQ09NT0RPRUNDRG9tYWluVmFsaWRhdGlvblNlY3VyZVNlcnZlckNB
Mi5jcmwwgYgGCCsGAQUFBwEBBHwwejBRBggrBgEFBQcwAoZFaHR0cDovL2NydC5j
b21vZG9jYTQuY29tL0NPTU9ET0VDQ0RvbWFpblZhbGlkYXRpb25TZWN1cmVTZXJ2
ZXJDQTIuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC5jb21vZG9jYTQuY29t
MIIB8gYDVR0RBIIB6TCCAeWCGXNzbDQwNTEzNi55dW5qaWFzdXNzbC5jb22CDCou
MTAweWJrLmNvbYIKKi45dTh1LmNvbYILKi5iYWlkdW8uY2+CCyouY2dvd24uY29t
gg4qLmNsb3Vkb3B0Lm5ldIILKi5kcmFzeS5uZXSCCyouZHlibncuY29tghEqLmhh
b3lhbmdtYW84LmNvbYILKi5oYmZ6Yi5jb22CCCoubGUwLm1lgg4qLm1zdGNoaW5n
LmNvbYIMKi5ub3NhZmUub3JnggoqLnF0aWFuLmNjggsqLnJwMnJwLmNvbYIQKi53
ZWl4aW5zaGFuZy5jboIJKi54YW11LmNuggsqLnh5Y3dsLmNvbYIMKi55dWxlYmEu
b3JnggoxMDB5YmsuY29tggg5dTh1LmNvbYIJYmFpZHVvLmNvggljZ293bi5jb22C
DGNsb3Vkb3B0Lm5ldIIJZHJhc3kubmV0gglkeWJudy5jb22CD2hhb3lhbmdtYW84
LmNvbYIJaGJmemIuY29tggZsZTAubWWCDG1zdGNoaW5nLmNvbYIKbm9zYWZlLm9y
Z4IIcXRpYW4uY2OCCXJwMnJwLmNvbYIOd2VpeGluc2hhbmcuY26CB3hhbXUuY26C
CXh5Y3dsLmNvbYIKeXVsZWJhLm9yZzAKBggqhkjOPQQDAgNJADBGAiEAlQvOidBC
wnLtVbiCJnLsXR9j39rlETb5XvOhxSMElxgCIQCp4iJThXPBr6KKSnnLj4KKaeGz
jYvi9HIFMfITDL4z9A==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIDnzCCAyWgAwIBAgIQWyXOaQfEJlVm0zkMmalUrTAKBggqhkjOPQQDAzCBhTEL
MAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE
BxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxKzApBgNVBAMT
IkNPTU9ETyBFQ0MgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTQwOTI1MDAw
MDAwWhcNMjkwOTI0MjM1OTU5WjCBkjELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdy
ZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09N
T0RPIENBIExpbWl0ZWQxODA2BgNVBAMTL0NPTU9ETyBFQ0MgRG9tYWluIFZhbGlk
YXRpb24gU2VjdXJlIFNlcnZlciBDQSAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
QgAEAjgZgTrJaYRwWQKOqIofMN+83gP8eR06JSxrQSEYgur5PkrkM8wSzypD/A7y
ZADA4SVQgiTNtkk4DyVHkUikraOCAWYwggFiMB8GA1UdIwQYMBaAFHVxpxlIGbyd
nepBR9+UxEh3mdN5MB0GA1UdDgQWBBRACWFn8LyDcU/eEggsb9TUK3Y9ljAOBgNV
HQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHSUEFjAUBggrBgEF
BQcDAQYIKwYBBQUHAwIwGwYDVR0gBBQwEjAGBgRVHSAAMAgGBmeBDAECATBMBgNV
HR8ERTBDMEGgP6A9hjtodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9FQ0ND
ZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNybDByBggrBgEFBQcBAQRmMGQwOwYIKwYB
BQUHMAKGL2h0dHA6Ly9jcnQuY29tb2RvY2EuY29tL0NPTU9ET0VDQ0FkZFRydXN0
Q0EuY3J0MCUGCCsGAQUFBzABhhlodHRwOi8vb2NzcC5jb21vZG9jYTQuY29tMAoG
CCqGSM49BAMDA2gAMGUCMQCsaEclgBNPE1bAojcJl1pQxOfttGHLKIoKETKm4nHf
EQGJbwd6IGZrGNC5LkP3Um8CMBKFfI4TZpIEuppFCZRKMGHRSdxv6+ctyYnPHmp8
7IXOMCVZuoFwNLg0f+cB0eLLUg==
-----END CERTIFICATE-----`,
}

//func TestGetCertBrand(t *testing.T) {
//	Init()
//	for _, p := range certPEMs {
//
//		d := []byte(p)
//		certs := []*x509.Certificate{}
//		for {
//			var cder *pem.Block
//			cder, d = pem.Decode(d)
//			if cder == nil {
//				break
//			}
//			cert, err := x509.ParseCertificate(cder.Bytes)
//			if err != nil {
//				t.Fatal(err)
//			}
//			certs = append(certs, cert)
//
//		}
//
//		n, g := GetCertBrand( certs)
//		t.Log(n, g)
//	}
//}

func TestUpdateConfig(t *testing.T) {
	updateConfig()
}

func TestConfigNeedUpdate(t *testing.T) {
	assert := assert.New(t)
	need := ConfigNeedUpdate()
	assert.Equal(false, need)
}

func TestGetBrandCacheVersion(t *testing.T) {
	assert := assert.New(t)
	version := GetBrandCacheVersion()
	assert.Equal(18, version)
}

// 测试从数据库加载缓存链 以及 保存链到数据库
func TestReadRelationFromDb(t *testing.T) {
	b := true
	testHookDBrealtion = &b

	brands, auths, err := loadCABrand()
	if err != nil {
		t.Fatal(err)
	}

	t.Logf("len brands: %d", len(brands))
	t.Logf("len auths: %d", len(auths))

	updateLen, trustRoots, trustCAs, err := ReadRelationFromDb(brands)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("update len %d", updateLen)
	t.Logf("trust roots %d", len(trustRoots))
	t.Logf("trust ca %d", len(trustCAs))

	caches := testHookBrandCache.CacheCACerts
	for _, cache := range caches {
		l := len(cache.SignFrom)
		k := 0
		for i := 0; i < l; i++ {
			for j := i + 1; j < l; j++ {
				if cache.SignFrom[i] == cache.SignFrom[j] {
					k++
				}
			}
		}
		if k > 0 {
			t.Logf("Before Exist Same SignFrom %v,%v", cache.Hash, k)
		}
	}
	for _, brand := range trustCAs {
		l := len(brand.SignFrom)
		for i := 0; i < l; i++ {
			for j := i + 1; j < l; j++ {
				if brand.SignFrom[i] == brand.SignFrom[j] {
					t.Fatalf("After Exist Same SignFrom %v,%v", brand.Hash, brand.SignFrom[i])
				}
			}
		}
	}

	res, err := GenerateRelation(trustRoots, trustCAs)
	if err != nil {
		t.Fatalf("gen relation err: %v", err)
	}

	t.Log(res)
}
