package ct

import (
	"log"
	"testing"

	ct "github.com/google/certificate-transparency-go"
	"github.com/stretchr/testify/assert"
)

var sctX509Extensions = [][]byte{
	[]byte{
		0x04,
		0x81, 0xf1,
		0x00, 0xef,
		0x00, 0x76, 0x00, 0x29, 0x3c, 0x51, 0x96, 0x54, 0xc8, 0x39, 0x65, 0xba, 0xaa, 0x50, 0xfc, 0x58,
		0x07, 0xd4, 0xb7, 0x6f, 0xbf, 0x58, 0x7a, 0x29, 0x72, 0xdc, 0xa4, 0xc3, 0x0c, 0xf4, 0xe5, 0x45,
		0x47, 0xf4, 0x78, 0x00, 0x00, 0x01, 0x64, 0x99, 0x9e, 0x44, 0xa6, 0x00, 0x00, 0x04, 0x03, 0x00,
		0x47, 0x30, 0x45, 0x02, 0x20, 0x67, 0xe8, 0xf5, 0x34, 0x64, 0xbe, 0x4e, 0x1b, 0xed, 0xf7, 0x05,
		0xe4, 0x01, 0x3a, 0x6a, 0xd1, 0xe5, 0x9c, 0xcf, 0x9f, 0x75, 0xa1, 0x04, 0xc7, 0x27, 0xe3, 0x23,
		0xfa, 0xa2, 0x88, 0x57, 0x35, 0x02, 0x21, 0x00, 0xc4, 0x46, 0xe4, 0xea, 0x14, 0x83, 0x73, 0xc4,
		0x37, 0xce, 0xdf, 0xe8, 0x33, 0xe2, 0x4e, 0x10, 0x4b, 0x54, 0xea, 0x43, 0x3d, 0x51, 0x4c, 0x45,
		0x2c, 0x1f, 0x32, 0x44, 0x8f, 0x6e, 0x3a, 0x26,
		0x00, 0x75, 0x00, 0x55, 0x81, 0xd4, 0xc2, 0x16, 0x90, 0x36, 0x01, 0x4a, 0xea, 0x0b, 0x9b, 0x57,
		0x3c, 0x53, 0xf0, 0xc0, 0xe4, 0x38, 0x78, 0x70, 0x25, 0x08, 0x17, 0x2f, 0xa3, 0xaa, 0x1d, 0x07,
		0x13, 0xd3, 0x0c, 0x00, 0x00, 0x01, 0x64, 0x99, 0x9e, 0x45, 0x89, 0x00, 0x00, 0x04, 0x03, 0x00,
		0x46, 0x30, 0x44, 0x02, 0x20, 0x55, 0xc5, 0x41, 0x5b, 0xf8, 0xed, 0xd6, 0x4a, 0xde, 0x3c, 0x58,
		0x81, 0xfa, 0x71, 0x64, 0xc1, 0x25, 0xed, 0xfe, 0x57, 0x28, 0x26, 0xf6, 0x70, 0xe1, 0x10, 0xe5,
		0x31, 0x4a, 0xc1, 0x31, 0xb4, 0x02, 0x20, 0x2c, 0x46, 0x0d, 0xca, 0xc3, 0x7c, 0xe1, 0x3f, 0x06,
		0xe7, 0x28, 0xac, 0xd4, 0xf5, 0x74, 0x81, 0x0f, 0xe1, 0x07, 0x48, 0x26, 0xac, 0xa6, 0x54, 0x61,
		0x88, 0x39, 0x1d, 0xe2, 0x71, 0x0e, 0xdf,
	},
	[]byte{
		0x04,
		0x82, 0x01, 0x69,
		0x01, 0x67,
		0x00, 0x76, 0x00, 0xA4, 0xB9, 0x09, 0x90, 0xB4, 0x18, 0x58, 0x14, 0x87, 0xBB, 0x13,
		0xA2, 0xCC, 0x67, 0x70, 0x0A, 0x3C, 0x35, 0x98, 0x04, 0xF9, 0x1B, 0xDF, 0xB8, 0xE3, 0x77, 0xCD,
		0x0E, 0xC8, 0x0D, 0xDC, 0x10, 0x00, 0x00, 0x01, 0x64, 0x69, 0x52, 0x3B, 0xC1, 0x00, 0x00, 0x04,
		0x03, 0x00, 0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0xB6, 0x82, 0x02, 0xC6, 0x1A, 0xB5, 0x11, 0xF3,
		0xC8, 0xE3, 0xD3, 0x83, 0xD7, 0xB1, 0xC5, 0xBC, 0x2B, 0x27, 0xA8, 0x00, 0x02, 0x3F, 0x05, 0xC8,
		0x16, 0xE5, 0xDF, 0x29, 0x36, 0x44, 0x62, 0x61, 0x02, 0x20, 0x5B, 0xB0, 0xC3, 0xA0, 0x35, 0xA9,
		0x4A, 0x98, 0x0B, 0xFA, 0xB5, 0x79, 0xAF, 0x34, 0x3F, 0x33, 0xF0, 0xFD, 0x89, 0x30, 0xD4, 0x5A,
		0xFB, 0xAB, 0x47, 0x65, 0x55, 0xAC, 0xF7, 0xC5, 0xDA, 0xC9,
		0x00, 0x76, 0x00, 0x56, 0x14, 0x06,
		0x9A, 0x2F, 0xD7, 0xC2, 0xEC, 0xD3, 0xF5, 0xE1, 0xBD, 0x44, 0xB2, 0x3E, 0xC7, 0x46, 0x76, 0xB9,
		0xBC, 0x99, 0x11, 0x5C, 0xC0, 0xEF, 0x94, 0x98, 0x55, 0xD6, 0x89, 0xD0, 0xDD, 0x00, 0x00, 0x01,
		0x64, 0x69, 0x52, 0x3C, 0x0E, 0x00, 0x00, 0x04, 0x03, 0x00, 0x47, 0x30, 0x45, 0x02, 0x20, 0x22,
		0xA7, 0x4A, 0xF0, 0xAC, 0xDF, 0x4F, 0x0C, 0x8E, 0xC3, 0xB4, 0xCF, 0xAB, 0x18, 0x4B, 0xE4, 0xA3,
		0x63, 0x3E, 0x3E, 0xE1, 0x31, 0xED, 0x06, 0x69, 0xA0, 0xF6, 0xC6, 0x48, 0xF5, 0xA6, 0xA4, 0x02,
		0x21, 0x00, 0x9E, 0xF0, 0x1E, 0x33, 0x7C, 0xC2, 0x9F, 0x88, 0x40, 0x8B, 0xED, 0xB8, 0x90, 0x54,
		0x7E, 0x87, 0x81, 0xD5, 0x50, 0xCA, 0x82, 0x8F, 0xF5, 0x63, 0x69, 0xCE, 0x71, 0x1D, 0x54, 0x8F,
		0x0A, 0xA7,
		0x00, 0x75, 0x00, 0xBB, 0xD9, 0xDF, 0xBC, 0x1F, 0x8A, 0x71, 0xB5, 0x93, 0x94, 0x23,
		0x97, 0xAA, 0x92, 0x7B, 0x47, 0x38, 0x57, 0x95, 0x0A, 0xAB, 0x52, 0xE8, 0x1A, 0x90, 0x96, 0x64,
		0x36, 0x8E, 0x1E, 0xD1, 0x85, 0x00, 0x00, 0x01, 0x64, 0x69, 0x52, 0x3C, 0xA9, 0x00, 0x00, 0x04,
		0x03, 0x00, 0x46, 0x30, 0x44, 0x02, 0x20, 0x24, 0x65, 0xDB, 0x38, 0x95, 0x8D, 0x1E, 0xBA, 0xFD,
		0xC9, 0xA8, 0x59, 0x34, 0xF6, 0x02, 0xC8, 0x70, 0xF4, 0x58, 0x73, 0xEE, 0x0F, 0xFA, 0xD6, 0xBE,
		0x21, 0x4D, 0x1C, 0xDB, 0x9D, 0xA5, 0xD2, 0x02, 0x20, 0x23, 0xD5, 0xF4, 0xE3, 0xD6, 0x5B, 0x60,
		0xF2, 0x78, 0x7C, 0x1F, 0x30, 0x0E, 0x3B, 0x34, 0x88, 0x0F, 0xB3, 0xDC, 0x32, 0x75, 0xAB, 0xCB,
		0x47, 0x10, 0xC7, 0x86, 0x6E, 0xC6, 0x92, 0x8F, 0x08,
	},
}

func TestParseX509SCTExtension(t *testing.T) {

	args := []struct {
		arg    []byte
		except struct {
			len int
			v   int
			ts  uint64
		}
	}{
		{arg: sctX509Extensions[0], except: struct {
			len int
			v   int
			ts  uint64
		}{len: 2, v: 0, ts: 1531585643686}},
		{arg: sctX509Extensions[1], except: struct {
			len int
			v   int
			ts  uint64
		}{3, 0, 1530775354305}},
	}

	for _, arg := range args {
		res, err := ParseX509SCTExtension(arg.arg)
		if err != nil {
			t.Fatal(err)
		}
		assert := assert.New(t)
		assert.Equal(arg.except.len, len(res))
		assert.Equal(ct.Version(0), res[0].SCTVersion)
		assert.Equal(arg.except.ts, res[0].Timestamp)
	}
}

var sctTLSExtension = []byte{
	// 0x00, 0x12,
	0x00, 0xf0,
	0x00, 0xee,
	0x00, 0x75, 0x00, 0xdb, 0x74, 0xaf, 0xee, 0xcb, 0x29, 0xec,
	0xb1, 0xfe, 0xca, 0x3e, 0x71, 0x6d, 0x2c, 0xe5, 0xb9, 0xaa, 0xbb, 0x36, 0xf7, 0x84, 0x71, 0x83,
	0xc7, 0x5d, 0x9d, 0x4f, 0x37, 0xb6, 0x1f, 0xbf, 0x64, 0x00, 0x00, 0x01, 0x64, 0x99, 0xbf, 0xba,
	0x99, 0x00, 0x00, 0x04, 0x03, 0x00, 0x46, 0x30, 0x44, 0x02, 0x20, 0x0b, 0x74, 0x40, 0xd4, 0x42,
	0x03, 0x43, 0x5a, 0x01, 0xff, 0x86, 0x41, 0x46, 0xc8, 0x28, 0xfa, 0x14, 0x96, 0x78, 0x18, 0xbf,
	0x4d, 0xa7, 0x8d, 0x3c, 0x92, 0x6c, 0x15, 0xb8, 0x29, 0xf2, 0xab, 0x02, 0x20, 0x79, 0xe7, 0x34,
	0x6d, 0x3d, 0x18, 0x90, 0x4a, 0x02, 0xf2, 0xb9, 0x23, 0x22, 0xf8, 0x67, 0x80, 0x77, 0xf3, 0x55,
	0x77, 0x46, 0xfd, 0x09, 0x75, 0x1a, 0x54, 0x67, 0xd1, 0xc1, 0x73, 0xce, 0x5f,
	0x00, 0x75, 0x00,
	0xc1, 0x16, 0x4a, 0xe0, 0xa7, 0x72, 0xd2, 0xd4, 0x39, 0x2d, 0xc8, 0x0a, 0xc1, 0x07, 0x70, 0xd4,
	0xf0, 0xc4, 0x9b, 0xde, 0x99, 0x1a, 0x48, 0x40, 0xc1, 0xfa, 0x07, 0x51, 0x64, 0xf6, 0x33, 0x60,
	0x00, 0x00, 0x01, 0x64, 0x99, 0xbf, 0xcb, 0x81, 0x00, 0x00, 0x04, 0x03, 0x00, 0x46, 0x30, 0x44,
	0x02, 0x20, 0x21, 0x56, 0x2c, 0xd0, 0xb0, 0x7d, 0x86, 0x0d, 0xed, 0x98, 0x8e, 0x6d, 0x57, 0x5b,
	0x03, 0xc8, 0x4f, 0x18, 0x3b, 0x22, 0x70, 0xa9, 0xcc, 0xd4, 0x12, 0xca, 0x76, 0x3a, 0x4f, 0x4a,
	0xb5, 0x7b, 0x02, 0x20, 0x2f, 0x45, 0x44, 0x2d, 0xf7, 0x3e, 0x59, 0x32, 0x40, 0x3d, 0x8e, 0xf0,
	0x25, 0xbd, 0xf7, 0xd2, 0x74, 0x3a, 0x5d, 0xe6, 0x27, 0x47, 0x33, 0xd1, 0x11, 0x7f, 0x11, 0x41,
	0x45, 0xdd, 0xf3, 0x4b,
}

func TestParseTLSSCTExtension(t *testing.T) {
	res, err := ParseTLSSCTExtension(sctTLSExtension)
	if err != nil {
		t.Fatal(err)
	}
	log.Printf("%+v", res)
	assert := assert.New(t)
	assert.Equal(2, len(res))
	assert.Equal(ct.Version(0), res[0].SCTVersion)
	assert.Equal(uint64(1531587836569), res[0].Timestamp)
}
