// Code generated by protoc-gen-go.
// source: polaris_ratelimitrule.proto
// DO NOT EDIT!

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 限流资源
type Rule_Resource int32

const (
	// 针对QPS进行限流
	Rule_QPS Rule_Resource = 0
	// 针对并发数进行限流
	Rule_CONCURRENCY Rule_Resource = 1
)

var Rule_Resource_name = map[int32]string{
	0: "QPS",
	1: "CONCURRENCY",
}
var Rule_Resource_value = map[string]int32{
	"QPS":         0,
	"CONCURRENCY": 1,
}

func (x Rule_Resource) String() string {
	return proto.EnumName(Rule_Resource_name, int32(x))
}
func (Rule_Resource) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1, 0} }

// 限流类型
// global全局限流(默认)或者local单机限流
type Rule_Type int32

const (
	Rule_GLOBAL Rule_Type = 0
	Rule_LOCAL  Rule_Type = 1
)

var Rule_Type_name = map[int32]string{
	0: "GLOBAL",
	1: "LOCAL",
}
var Rule_Type_value = map[string]int32{
	"GLOBAL": 0,
	"LOCAL":  1,
}

func (x Rule_Type) String() string {
	return proto.EnumName(Rule_Type_name, int32(x))
}
func (Rule_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1, 1} }

// 同一服务下限流规则集合
type RateLimit struct {
	// 限流规则集合
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
	// 限流规则汇总的revision信息
	Revision *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RateLimit) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *RateLimit) GetRevision() *google_protobuf.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

// 单个限流规则信息
type Rule struct {
	// 限流规则唯一标识
	Id *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 限流规则所属服务名
	Service *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	// 限流规则所属命名空间
	Namespace *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	// 限流规则所属集群名
	Cluster *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=cluster" json:"cluster,omitempty"`
	// 限流规则优先级，0值最高
	Priority *google_protobuf.UInt32Value `protobuf:"bytes,5,opt,name=priority" json:"priority,omitempty"`
	Resource Rule_Resource                `protobuf:"varint,6,opt,name=resource,enum=v1.Rule_Resource" json:"resource,omitempty"`
	Type     Rule_Type                    `protobuf:"varint,7,opt,name=type,enum=v1.Rule_Type" json:"type,omitempty"`
	// 业务标签集合，通过KV进行匹配，匹配到一个则使用该规则
	Labels map[string]*MatchString `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 限流阈值
	// 可以有多个粒度的配置（比如同时针对秒级，分钟级，天级），匹配一个则进行限流
	// 全局限流模式下，该值为服务配额总量；单机限流模式下，该值为单个节点能处理的配额量
	Amounts []*Amount `protobuf:"bytes,9,rep,name=amounts" json:"amounts,omitempty"`
	// 限流动作，对应着客户端的插件名字
	Action *google_protobuf.StringValue `protobuf:"bytes,10,opt,name=action" json:"action,omitempty"`
	// 是否停用该限流规则，默认启用
	Disable *google_protobuf.BoolValue `protobuf:"bytes,11,opt,name=disable" json:"disable,omitempty"`
	// 限流上报方式，同时支持按固定周期上报，以及达到配额百分比后上报
	Report *Report `protobuf:"bytes,12,opt,name=report" json:"report,omitempty"`
	// 限流规则创建时间
	Ctime *google_protobuf.StringValue `protobuf:"bytes,13,opt,name=ctime" json:"ctime,omitempty"`
	// 限流规则修改时间
	Mtime *google_protobuf.StringValue `protobuf:"bytes,14,opt,name=mtime" json:"mtime,omitempty"`
	// 限流规则revision信息
	Revision *google_protobuf.StringValue `protobuf:"bytes,15,opt,name=revision" json:"revision,omitempty"`
	// 服务的TOKEN信息，仅用于控制台，discover接口不下发
	ServiceToken *google_protobuf.StringValue `protobuf:"bytes,16,opt,name=service_token" json:"service_token,omitempty"`
	// 配额调整算法
	Adjuster     *AmountAdjuster            `protobuf:"bytes,17,opt,name=adjuster" json:"adjuster,omitempty"`
	RegexCombine *google_protobuf.BoolValue `protobuf:"bytes,18,opt,name=regex_combine,json=regexCombine" json:"regex_combine,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Rule) GetId() *google_protobuf.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Rule) GetService() *google_protobuf.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *Rule) GetNamespace() *google_protobuf.StringValue {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Rule) GetCluster() *google_protobuf.StringValue {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *Rule) GetPriority() *google_protobuf.UInt32Value {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *Rule) GetResource() Rule_Resource {
	if m != nil {
		return m.Resource
	}
	return Rule_QPS
}

func (m *Rule) GetType() Rule_Type {
	if m != nil {
		return m.Type
	}
	return Rule_GLOBAL
}

func (m *Rule) GetLabels() map[string]*MatchString {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Rule) GetAmounts() []*Amount {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *Rule) GetAction() *google_protobuf.StringValue {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Rule) GetDisable() *google_protobuf.BoolValue {
	if m != nil {
		return m.Disable
	}
	return nil
}

func (m *Rule) GetReport() *Report {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *Rule) GetCtime() *google_protobuf.StringValue {
	if m != nil {
		return m.Ctime
	}
	return nil
}

func (m *Rule) GetMtime() *google_protobuf.StringValue {
	if m != nil {
		return m.Mtime
	}
	return nil
}

func (m *Rule) GetRevision() *google_protobuf.StringValue {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *Rule) GetServiceToken() *google_protobuf.StringValue {
	if m != nil {
		return m.ServiceToken
	}
	return nil
}

func (m *Rule) GetAdjuster() *AmountAdjuster {
	if m != nil {
		return m.Adjuster
	}
	return nil
}

func (m *Rule) GetRegexCombine() *google_protobuf.BoolValue {
	if m != nil {
		return m.RegexCombine
	}
	return nil
}

// 限流配额
type Amount struct {
	// 时间周期内的最大配额数
	MaxAmount *google_protobuf.UInt32Value `protobuf:"bytes,1,opt,name=maxAmount" json:"maxAmount,omitempty"`
	// 配额生效的时间周期，必须大于等于1s
	ValidDuration *google_protobuf1.Duration `protobuf:"bytes,2,opt,name=validDuration" json:"validDuration,omitempty"`
	// 请求统计精度
	Precision *google_protobuf.UInt32Value `protobuf:"bytes,3,opt,name=precision" json:"precision,omitempty"`
	// 可选，起始限流阈值，爬坡起始值
	StartAmount *google_protobuf.UInt32Value `protobuf:"bytes,4,opt,name=startAmount" json:"startAmount,omitempty"`
	// 可选，最小限流阈值，降低时最小值
	MinAmount *google_protobuf.UInt32Value `protobuf:"bytes,5,opt,name=minAmount" json:"minAmount,omitempty"`
}

func (m *Amount) Reset()                    { *m = Amount{} }
func (m *Amount) String() string            { return proto.CompactTextString(m) }
func (*Amount) ProtoMessage()               {}
func (*Amount) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Amount) GetMaxAmount() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxAmount
	}
	return nil
}

func (m *Amount) GetValidDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.ValidDuration
	}
	return nil
}

func (m *Amount) GetPrecision() *google_protobuf.UInt32Value {
	if m != nil {
		return m.Precision
	}
	return nil
}

func (m *Amount) GetStartAmount() *google_protobuf.UInt32Value {
	if m != nil {
		return m.StartAmount
	}
	return nil
}

func (m *Amount) GetMinAmount() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MinAmount
	}
	return nil
}

// 限流上报方式
type Report struct {
	// 配额固定上报周期，单位毫秒
	Interval *google_protobuf1.Duration `protobuf:"bytes,1,opt,name=interval" json:"interval,omitempty"`
	// 使用了百分之多少配额后启动一次实时上报，值范围(0,100]
	AmountPercent *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=amountPercent" json:"amountPercent,omitempty"`
}

func (m *Report) Reset()                    { *m = Report{} }
func (m *Report) String() string            { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()               {}
func (*Report) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Report) GetInterval() *google_protobuf1.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *Report) GetAmountPercent() *google_protobuf.UInt32Value {
	if m != nil {
		return m.AmountPercent
	}
	return nil
}

// 配额调整算法
type AmountAdjuster struct {
	Climb *ClimbConfig `protobuf:"bytes,1,opt,name=climb" json:"climb,omitempty"`
}

func (m *AmountAdjuster) Reset()                    { *m = AmountAdjuster{} }
func (m *AmountAdjuster) String() string            { return proto.CompactTextString(m) }
func (*AmountAdjuster) ProtoMessage()               {}
func (*AmountAdjuster) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *AmountAdjuster) GetClimb() *ClimbConfig {
	if m != nil {
		return m.Climb
	}
	return nil
}

// 限流调整算法Climb相关配置
type ClimbConfig struct {
	Enable     *google_protobuf.BoolValue   `protobuf:"bytes,1,opt,name=enable" json:"enable,omitempty"`
	Metric     *ClimbConfig_MetricConfig    `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
	Policy     *ClimbConfig_TriggerPolicy   `protobuf:"bytes,3,opt,name=policy" json:"policy,omitempty"`
	Throttling *ClimbConfig_ClimbThrottling `protobuf:"bytes,4,opt,name=throttling" json:"throttling,omitempty"`
}

func (m *ClimbConfig) Reset()                    { *m = ClimbConfig{} }
func (m *ClimbConfig) String() string            { return proto.CompactTextString(m) }
func (*ClimbConfig) ProtoMessage()               {}
func (*ClimbConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *ClimbConfig) GetEnable() *google_protobuf.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ClimbConfig) GetMetric() *ClimbConfig_MetricConfig {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *ClimbConfig) GetPolicy() *ClimbConfig_TriggerPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *ClimbConfig) GetThrottling() *ClimbConfig_ClimbThrottling {
	if m != nil {
		return m.Throttling
	}
	return nil
}

// 限流数据统计配置
type ClimbConfig_MetricConfig struct {
	// 限流数据度量周期，默认60s
	Window *google_protobuf1.Duration `protobuf:"bytes,1,opt,name=window" json:"window,omitempty"`
	// 数据统计精度，决定数据度量的最小周期，度量滑窗的步长=window/precision
	Precision *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=precision" json:"precision,omitempty"`
	// 上报周期，默认20s
	ReportInterval *google_protobuf1.Duration `protobuf:"bytes,3,opt,name=reportInterval" json:"reportInterval,omitempty"`
}

func (m *ClimbConfig_MetricConfig) Reset()                    { *m = ClimbConfig_MetricConfig{} }
func (m *ClimbConfig_MetricConfig) String() string            { return proto.CompactTextString(m) }
func (*ClimbConfig_MetricConfig) ProtoMessage()               {}
func (*ClimbConfig_MetricConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5, 0} }

func (m *ClimbConfig_MetricConfig) GetWindow() *google_protobuf1.Duration {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *ClimbConfig_MetricConfig) GetPrecision() *google_protobuf.UInt32Value {
	if m != nil {
		return m.Precision
	}
	return nil
}

func (m *ClimbConfig_MetricConfig) GetReportInterval() *google_protobuf1.Duration {
	if m != nil {
		return m.ReportInterval
	}
	return nil
}

// 触发调整的策略
type ClimbConfig_TriggerPolicy struct {
	ErrorRate *ClimbConfig_TriggerPolicy_ErrorRate `protobuf:"bytes,1,opt,name=errorRate" json:"errorRate,omitempty"`
	SlowRate  *ClimbConfig_TriggerPolicy_SlowRate  `protobuf:"bytes,2,opt,name=slowRate" json:"slowRate,omitempty"`
}

func (m *ClimbConfig_TriggerPolicy) Reset()                    { *m = ClimbConfig_TriggerPolicy{} }
func (m *ClimbConfig_TriggerPolicy) String() string            { return proto.CompactTextString(m) }
func (*ClimbConfig_TriggerPolicy) ProtoMessage()               {}
func (*ClimbConfig_TriggerPolicy) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5, 1} }

func (m *ClimbConfig_TriggerPolicy) GetErrorRate() *ClimbConfig_TriggerPolicy_ErrorRate {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy) GetSlowRate() *ClimbConfig_TriggerPolicy_SlowRate {
	if m != nil {
		return m.SlowRate
	}
	return nil
}

// 错误率触发调整配置
type ClimbConfig_TriggerPolicy_ErrorRate struct {
	Enable                 *google_protobuf.BoolValue                           `protobuf:"bytes,1,opt,name=enable" json:"enable,omitempty"`
	RequestVolumeThreshold *google_protobuf.UInt32Value                         `protobuf:"bytes,2,opt,name=requestVolumeThreshold" json:"requestVolumeThreshold,omitempty"`
	ErrorRate              *google_protobuf.Int32Value                          `protobuf:"bytes,3,opt,name=errorRate" json:"errorRate,omitempty"`
	Specials               []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig `protobuf:"bytes,4,rep,name=specials" json:"specials,omitempty"`
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) Reset()         { *m = ClimbConfig_TriggerPolicy_ErrorRate{} }
func (m *ClimbConfig_TriggerPolicy_ErrorRate) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig_TriggerPolicy_ErrorRate) ProtoMessage()    {}
func (*ClimbConfig_TriggerPolicy_ErrorRate) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{5, 1, 0}
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetEnable() *google_protobuf.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetRequestVolumeThreshold() *google_protobuf.UInt32Value {
	if m != nil {
		return m.RequestVolumeThreshold
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetErrorRate() *google_protobuf.Int32Value {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate) GetSpecials() []*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig {
	if m != nil {
		return m.Specials
	}
	return nil
}

// 特殊错误码触发调整配置
type ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig struct {
	Type       *google_protobuf.StringValue  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	ErrorCodes []*google_protobuf.Int64Value `protobuf:"bytes,2,rep,name=errorCodes" json:"errorCodes,omitempty"`
	ErrorRate  *google_protobuf.Int32Value   `protobuf:"bytes,3,opt,name=errorRate" json:"errorRate,omitempty"`
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Reset() {
	*m = ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig{}
}
func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) String() string {
	return proto.CompactTextString(m)
}
func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) ProtoMessage() {}
func (*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{5, 1, 0, 0}
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetType() *google_protobuf.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorCodes() []*google_protobuf.Int64Value {
	if m != nil {
		return m.ErrorCodes
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig) GetErrorRate() *google_protobuf.Int32Value {
	if m != nil {
		return m.ErrorRate
	}
	return nil
}

// 慢调用触发调整配置
type ClimbConfig_TriggerPolicy_SlowRate struct {
	Enable   *google_protobuf.BoolValue  `protobuf:"bytes,1,opt,name=enable" json:"enable,omitempty"`
	MaxRt    *google_protobuf1.Duration  `protobuf:"bytes,2,opt,name=maxRt" json:"maxRt,omitempty"`
	SlowRate *google_protobuf.Int32Value `protobuf:"bytes,3,opt,name=slowRate" json:"slowRate,omitempty"`
}

func (m *ClimbConfig_TriggerPolicy_SlowRate) Reset()         { *m = ClimbConfig_TriggerPolicy_SlowRate{} }
func (m *ClimbConfig_TriggerPolicy_SlowRate) String() string { return proto.CompactTextString(m) }
func (*ClimbConfig_TriggerPolicy_SlowRate) ProtoMessage()    {}
func (*ClimbConfig_TriggerPolicy_SlowRate) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{5, 1, 1}
}

func (m *ClimbConfig_TriggerPolicy_SlowRate) GetEnable() *google_protobuf.BoolValue {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_SlowRate) GetMaxRt() *google_protobuf1.Duration {
	if m != nil {
		return m.MaxRt
	}
	return nil
}

func (m *ClimbConfig_TriggerPolicy_SlowRate) GetSlowRate() *google_protobuf.Int32Value {
	if m != nil {
		return m.SlowRate
	}
	return nil
}

// 爬坡调整相关参数
type ClimbConfig_ClimbThrottling struct {
	ColdBelowTuneDownRate  *google_protobuf.Int32Value `protobuf:"bytes,1,opt,name=coldBelowTuneDownRate" json:"coldBelowTuneDownRate,omitempty"`
	ColdBelowTuneUpRate    *google_protobuf.Int32Value `protobuf:"bytes,2,opt,name=coldBelowTuneUpRate" json:"coldBelowTuneUpRate,omitempty"`
	ColdAboveTuneDownRate  *google_protobuf.Int32Value `protobuf:"bytes,3,opt,name=coldAboveTuneDownRate" json:"coldAboveTuneDownRate,omitempty"`
	ColdAboveTuneUpRate    *google_protobuf.Int32Value `protobuf:"bytes,4,opt,name=coldAboveTuneUpRate" json:"coldAboveTuneUpRate,omitempty"`
	LimitThresholdToTuneUp *google_protobuf.Int32Value `protobuf:"bytes,5,opt,name=limitThresholdToTuneUp" json:"limitThresholdToTuneUp,omitempty"`
	JudgeDuration          *google_protobuf1.Duration  `protobuf:"bytes,6,opt,name=judgeDuration" json:"judgeDuration,omitempty"`
	TuneUpPeriod           *google_protobuf.Int32Value `protobuf:"bytes,7,opt,name=tuneUpPeriod" json:"tuneUpPeriod,omitempty"`
	TuneDownPeriod         *google_protobuf.Int32Value `protobuf:"bytes,8,opt,name=tuneDownPeriod" json:"tuneDownPeriod,omitempty"`
}

func (m *ClimbConfig_ClimbThrottling) Reset()                    { *m = ClimbConfig_ClimbThrottling{} }
func (m *ClimbConfig_ClimbThrottling) String() string            { return proto.CompactTextString(m) }
func (*ClimbConfig_ClimbThrottling) ProtoMessage()               {}
func (*ClimbConfig_ClimbThrottling) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5, 2} }

func (m *ClimbConfig_ClimbThrottling) GetColdBelowTuneDownRate() *google_protobuf.Int32Value {
	if m != nil {
		return m.ColdBelowTuneDownRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetColdBelowTuneUpRate() *google_protobuf.Int32Value {
	if m != nil {
		return m.ColdBelowTuneUpRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetColdAboveTuneDownRate() *google_protobuf.Int32Value {
	if m != nil {
		return m.ColdAboveTuneDownRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetColdAboveTuneUpRate() *google_protobuf.Int32Value {
	if m != nil {
		return m.ColdAboveTuneUpRate
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetLimitThresholdToTuneUp() *google_protobuf.Int32Value {
	if m != nil {
		return m.LimitThresholdToTuneUp
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetJudgeDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.JudgeDuration
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetTuneUpPeriod() *google_protobuf.Int32Value {
	if m != nil {
		return m.TuneUpPeriod
	}
	return nil
}

func (m *ClimbConfig_ClimbThrottling) GetTuneDownPeriod() *google_protobuf.Int32Value {
	if m != nil {
		return m.TuneDownPeriod
	}
	return nil
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "v1.RateLimit")
	proto.RegisterType((*Rule)(nil), "v1.Rule")
	proto.RegisterType((*Amount)(nil), "v1.Amount")
	proto.RegisterType((*Report)(nil), "v1.Report")
	proto.RegisterType((*AmountAdjuster)(nil), "v1.AmountAdjuster")
	proto.RegisterType((*ClimbConfig)(nil), "v1.ClimbConfig")
	proto.RegisterType((*ClimbConfig_MetricConfig)(nil), "v1.ClimbConfig.MetricConfig")
	proto.RegisterType((*ClimbConfig_TriggerPolicy)(nil), "v1.ClimbConfig.TriggerPolicy")
	proto.RegisterType((*ClimbConfig_TriggerPolicy_ErrorRate)(nil), "v1.ClimbConfig.TriggerPolicy.ErrorRate")
	proto.RegisterType((*ClimbConfig_TriggerPolicy_ErrorRate_SpecialConfig)(nil), "v1.ClimbConfig.TriggerPolicy.ErrorRate.SpecialConfig")
	proto.RegisterType((*ClimbConfig_TriggerPolicy_SlowRate)(nil), "v1.ClimbConfig.TriggerPolicy.SlowRate")
	proto.RegisterType((*ClimbConfig_ClimbThrottling)(nil), "v1.ClimbConfig.ClimbThrottling")
	proto.RegisterEnum("v1.Rule_Resource", Rule_Resource_name, Rule_Resource_value)
	proto.RegisterEnum("v1.Rule_Type", Rule_Type_name, Rule_Type_value)
}

func init() { proto.RegisterFile("polaris_ratelimitrule.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xae, 0xfc, 0xa3, 0xd8, 0xc7, 0xb1, 0xe3, 0x6e, 0xa1, 0x23, 0x5c, 0x5a, 0x8a, 0xa7, 0x40,
	0x2f, 0x8a, 0x43, 0xdc, 0xa4, 0x2d, 0x65, 0x86, 0x8c, 0xe3, 0x66, 0x98, 0x32, 0x4e, 0x93, 0x28,
	0x4e, 0x67, 0xb8, 0xca, 0xc8, 0xd2, 0xd6, 0xd9, 0x56, 0xd2, 0x8a, 0xd5, 0xca, 0x8e, 0xaf, 0x79,
	0x18, 0x78, 0x04, 0xb8, 0x60, 0x86, 0x47, 0xe0, 0x0d, 0x78, 0x06, 0xde, 0x80, 0xd1, 0x6a, 0x25,
	0x4b, 0x4e, 0x62, 0xab, 0xe5, 0xce, 0xd9, 0xf3, 0x7d, 0xe7, 0x7c, 0x7b, 0xf6, 0xdb, 0xd5, 0x09,
	0xdc, 0xf1, 0xa8, 0x6d, 0x30, 0xe2, 0x9f, 0x31, 0x83, 0x63, 0x9b, 0x38, 0x84, 0xb3, 0xc0, 0xc6,
	0x1d, 0x8f, 0x51, 0x4e, 0x51, 0x61, 0xb2, 0xd5, 0xba, 0x37, 0xa6, 0x74, 0x6c, 0xe3, 0x4d, 0xb1,
	0x32, 0x0a, 0xde, 0x6c, 0x4e, 0x99, 0xe1, 0x79, 0x98, 0xf9, 0x11, 0xe6, 0x72, 0xdc, 0x0a, 0x98,
	0xc1, 0x09, 0x75, 0x65, 0xfc, 0x56, 0x5c, 0xc0, 0xa1, 0x16, 0xb6, 0xa3, 0xc5, 0x36, 0x86, 0xaa,
	0x6e, 0x70, 0x3c, 0x08, 0xeb, 0xa1, 0x7b, 0x50, 0x0e, 0x6b, 0xfa, 0x9a, 0x72, 0xbf, 0xf8, 0xb0,
	0xd6, 0xad, 0x74, 0x26, 0x5b, 0x1d, 0x3d, 0xb0, 0xb1, 0x1e, 0x2d, 0xa3, 0x67, 0x50, 0x61, 0x78,
	0x42, 0x7c, 0x42, 0x5d, 0xad, 0x70, 0x5f, 0x79, 0x58, 0xeb, 0x7e, 0xda, 0x89, 0x8a, 0x76, 0xe2,
	0xa2, 0x9d, 0x13, 0xce, 0x88, 0x3b, 0x7e, 0x6d, 0xd8, 0x01, 0xd6, 0x13, 0x74, 0xfb, 0xf7, 0x0a,
	0x94, 0xc2, 0x4c, 0xe8, 0x11, 0x14, 0x88, 0xa5, 0x29, 0x39, 0xc8, 0x05, 0x62, 0xa1, 0x27, 0xb0,
	0xe6, 0x63, 0x36, 0x21, 0x26, 0xce, 0x55, 0x2f, 0x06, 0xa3, 0xe7, 0x50, 0x75, 0x0d, 0x07, 0xfb,
	0x9e, 0x61, 0x62, 0xad, 0x98, 0x83, 0x39, 0x87, 0x87, 0x35, 0x4d, 0x3b, 0xf0, 0x39, 0x66, 0x5a,
	0x29, 0x4f, 0x4d, 0x09, 0x0e, 0x9b, 0xe3, 0x31, 0x42, 0x19, 0xe1, 0x33, 0xad, 0x7c, 0x0d, 0xf1,
	0xf4, 0xa5, 0xcb, 0x1f, 0x77, 0x65, 0x73, 0x62, 0x34, 0xfa, 0x3a, 0x6c, 0xab, 0x4f, 0x03, 0x66,
	0x62, 0x4d, 0xbd, 0xaf, 0x3c, 0x6c, 0x74, 0x6f, 0xc6, 0x9d, 0xef, 0xe8, 0x32, 0xa0, 0x27, 0x10,
	0xf4, 0x39, 0x94, 0xf8, 0xcc, 0xc3, 0xda, 0x9a, 0x80, 0xd6, 0x13, 0xe8, 0x70, 0xe6, 0x61, 0x5d,
	0x84, 0xd0, 0x23, 0x50, 0x6d, 0x63, 0x84, 0x6d, 0x5f, 0xab, 0x88, 0x93, 0xfc, 0x28, 0x01, 0x0d,
	0xc4, 0xf2, 0xbe, 0xcb, 0xd9, 0x4c, 0x97, 0x18, 0xf4, 0x00, 0xd6, 0x0c, 0x87, 0x06, 0x2e, 0xf7,
	0xb5, 0xaa, 0x80, 0x43, 0x08, 0xef, 0x89, 0x25, 0x3d, 0x0e, 0xa1, 0x6d, 0x50, 0x0d, 0x33, 0xb4,
	0x93, 0x06, 0x39, 0xda, 0x22, 0xb1, 0x68, 0x1b, 0xd6, 0x2c, 0xe2, 0x1b, 0x23, 0x1b, 0x6b, 0x35,
	0x41, 0x6b, 0x5d, 0xa2, 0xed, 0x51, 0x6a, 0xcb, 0x5e, 0x4a, 0x28, 0x6a, 0x83, 0xca, 0xb0, 0x47,
	0x19, 0xd7, 0xd6, 0x05, 0x49, 0x08, 0xd2, 0xc5, 0x8a, 0x2e, 0x23, 0xa8, 0x0b, 0x65, 0x93, 0x13,
	0x07, 0x6b, 0xf5, 0x1c, 0x72, 0x22, 0x68, 0xc8, 0x71, 0x04, 0xa7, 0x91, 0x87, 0x23, 0xa0, 0x19,
	0xd3, 0x6f, 0xbc, 0x8f, 0xe9, 0xd1, 0x1e, 0xd4, 0xa5, 0x21, 0xcf, 0x38, 0x7d, 0x87, 0x5d, 0xad,
	0x99, 0x83, 0x9e, 0xa5, 0xa0, 0x0e, 0x54, 0x0c, 0xeb, 0x6d, 0x64, 0xc7, 0x9b, 0x82, 0x8e, 0xe6,
	0x87, 0xd3, 0x93, 0x11, 0x3d, 0xc1, 0xa0, 0x5d, 0xa8, 0x33, 0x3c, 0xc6, 0x17, 0x67, 0x26, 0x75,
	0x46, 0xc4, 0xc5, 0x1a, 0x5a, 0xd9, 0xf5, 0x75, 0x41, 0xe8, 0x47, 0xf8, 0xd6, 0x8f, 0x50, 0x4b,
	0x79, 0x04, 0x35, 0xa1, 0xf8, 0x0e, 0xcf, 0xc4, 0x85, 0xad, 0xea, 0xe1, 0x4f, 0xf4, 0x05, 0x94,
	0x27, 0x21, 0x4f, 0xde, 0xc8, 0x8d, 0x50, 0xce, 0x81, 0xc1, 0xcd, 0xf3, 0x68, 0x17, 0x7a, 0x14,
	0x7d, 0x5e, 0x78, 0xa6, 0xb4, 0x1f, 0x40, 0x25, 0xf6, 0x2f, 0x5a, 0x83, 0xe2, 0xf1, 0xd1, 0x49,
	0xf3, 0x06, 0xda, 0x80, 0x5a, 0xff, 0xf0, 0x55, 0xff, 0x54, 0xd7, 0xf7, 0x5f, 0xf5, 0x7f, 0x6a,
	0x2a, 0xed, 0xbb, 0x50, 0x0a, 0xad, 0x8b, 0x00, 0xd4, 0x1f, 0x06, 0x87, 0x7b, 0xbd, 0x41, 0xf3,
	0x06, 0xaa, 0x42, 0x79, 0x70, 0xd8, 0xef, 0x0d, 0x9a, 0x4a, 0xfb, 0xcf, 0x02, 0xa8, 0xd1, 0x76,
	0xc3, 0x6b, 0xed, 0x18, 0x17, 0xd1, 0x1f, 0xd7, 0xbe, 0x21, 0xe9, 0x3b, 0x36, 0x87, 0x87, 0x8d,
	0x99, 0x18, 0x36, 0xb1, 0x5e, 0xc8, 0x47, 0x51, 0xca, 0xff, 0xe4, 0x12, 0x3f, 0x06, 0xe8, 0x59,
	0x7c, 0x58, 0xdc, 0x63, 0xd8, 0x8c, 0x8c, 0x50, 0xcc, 0x53, 0x3c, 0x81, 0xa3, 0xef, 0xa1, 0xe6,
	0x73, 0x83, 0x71, 0x29, 0xbd, 0x94, 0x83, 0x9d, 0x26, 0x88, 0x8d, 0x13, 0x57, 0xb2, 0xcb, 0xb9,
	0x36, 0x1e, 0xc3, 0xdb, 0xbf, 0x28, 0xa0, 0x46, 0x57, 0x07, 0xed, 0x40, 0x85, 0xb8, 0x1c, 0xb3,
	0x89, 0x61, 0xcb, 0xf6, 0x2d, 0xd9, 0x7e, 0x02, 0x0d, 0x7d, 0x1c, 0x3d, 0x02, 0x47, 0x98, 0x99,
	0xd8, 0xe5, 0xd7, 0xbe, 0xc5, 0x69, 0x05, 0x59, 0x4a, 0xfb, 0x29, 0x34, 0xb2, 0x9e, 0x0d, 0x7d,
	0x64, 0xda, 0xc4, 0x19, 0x49, 0x25, 0xc2, 0x47, 0xfd, 0x70, 0xa1, 0x4f, 0xdd, 0x37, 0x64, 0xac,
	0x47, 0xd1, 0xf6, 0xdf, 0x0d, 0xa8, 0xa5, 0x96, 0x51, 0x17, 0x54, 0xec, 0x8a, 0xf7, 0x44, 0x59,
	0xe9, 0x6c, 0x89, 0x0c, 0x9f, 0x2e, 0x07, 0x73, 0x46, 0xcc, 0x44, 0x79, 0xb6, 0x56, 0xe7, 0x40,
	0x44, 0x65, 0x61, 0x89, 0x45, 0x3b, 0xa0, 0x7a, 0xd4, 0x26, 0xe6, 0x4c, 0x9e, 0xf6, 0xdd, 0x45,
	0xd6, 0x90, 0x91, 0xf1, 0x18, 0xb3, 0x23, 0x01, 0xd2, 0x25, 0x18, 0xed, 0x02, 0xf0, 0x73, 0x46,
	0x39, 0xb7, 0x89, 0x3b, 0x96, 0x47, 0xfd, 0xd9, 0x22, 0x55, 0xfc, 0x1e, 0x26, 0x30, 0x3d, 0x45,
	0x69, 0xfd, 0xa5, 0xc0, 0x7a, 0x5a, 0x10, 0xda, 0x02, 0x75, 0x4a, 0x5c, 0x8b, 0x4e, 0x57, 0x1f,
	0x9a, 0x04, 0x66, 0xcd, 0x5a, 0x78, 0x3f, 0xb3, 0xf6, 0xa0, 0x11, 0x3d, 0xb1, 0x2f, 0x63, 0xaf,
	0x14, 0x57, 0x95, 0x5d, 0x20, 0xb4, 0x7e, 0x55, 0xa1, 0x9e, 0xe9, 0x0e, 0xda, 0x87, 0x2a, 0x66,
	0x8c, 0xb2, 0x70, 0xd8, 0x90, 0xdb, 0xf8, 0x6a, 0x69, 0x3f, 0x3b, 0xfb, 0x31, 0x5c, 0x9f, 0x33,
	0xd1, 0x1e, 0x54, 0x7c, 0x9b, 0x4e, 0x45, 0x96, 0x68, 0x5b, 0x5f, 0x2e, 0xcf, 0x72, 0x22, 0xd1,
	0x7a, 0xc2, 0x6b, 0xfd, 0x53, 0x84, 0x6a, 0x92, 0xfc, 0x83, 0xfc, 0x34, 0x84, 0xdb, 0x0c, 0xff,
	0x1c, 0x60, 0x9f, 0xbf, 0xa6, 0x76, 0xe0, 0xe0, 0xe1, 0x39, 0xc3, 0xfe, 0x39, 0xb5, 0xad, 0x5c,
	0xad, 0xbe, 0x86, 0x8b, 0xbe, 0x4d, 0xb7, 0x28, 0x6a, 0xf9, 0x9d, 0x4b, 0x89, 0xd2, 0x47, 0x36,
	0x6f, 0xcb, 0x31, 0x54, 0x7c, 0x0f, 0x9b, 0xc4, 0xb0, 0x7d, 0xad, 0x24, 0x3e, 0xe1, 0x3b, 0x39,
	0x9b, 0xdb, 0x39, 0x89, 0x78, 0xd2, 0xfb, 0x49, 0x9a, 0xd6, 0x1f, 0x0a, 0xd4, 0x33, 0x31, 0xf4,
	0x8d, 0x9c, 0x3b, 0xf2, 0x0c, 0x6f, 0xd1, 0x18, 0xf2, 0x1d, 0x80, 0xd0, 0xd8, 0xa7, 0x16, 0xf6,
	0xb5, 0x82, 0x10, 0x76, 0xe5, 0x96, 0x9e, 0x6c, 0x47, 0xb4, 0x14, 0xfc, 0x7f, 0xb4, 0xa3, 0xf5,
	0x9b, 0x02, 0x95, 0xf8, 0xe0, 0x3f, 0xe8, 0x80, 0x37, 0xa1, 0xec, 0x18, 0x17, 0x3a, 0x5f, 0xfd,
	0x91, 0x88, 0x70, 0xe8, 0x69, 0xca, 0x97, 0x39, 0xb4, 0xce, 0xcd, 0xf8, 0x6f, 0x09, 0x36, 0x16,
	0x1e, 0x03, 0x74, 0x0c, 0x1f, 0x9b, 0xd4, 0xb6, 0xf6, 0xb0, 0x4d, 0xa7, 0xc3, 0xc0, 0xc5, 0x2f,
	0xe8, 0xd4, 0x4d, 0xdd, 0x9b, 0xa5, 0x99, 0xaf, 0x66, 0xa2, 0x03, 0xb8, 0x95, 0x09, 0x9c, 0x7a,
	0xa9, 0x2b, 0xb4, 0x34, 0xe1, 0x55, 0xbc, 0x58, 0x61, 0x6f, 0x44, 0x27, 0x38, 0xa3, 0xb0, 0x98,
	0x53, 0xe1, 0x25, 0x66, 0xac, 0x30, 0x09, 0x48, 0x85, 0xa5, 0x9c, 0x0a, 0x17, 0x78, 0xe8, 0x04,
	0x6e, 0x8b, 0xff, 0xa1, 0x92, 0xeb, 0x35, 0xa4, 0x51, 0x54, 0x7e, 0x3e, 0x97, 0x66, 0xbc, 0x86,
	0x1a, 0xce, 0x10, 0x6f, 0x03, 0x6b, 0x8c, 0x93, 0x19, 0x42, 0x5d, 0x39, 0x43, 0x64, 0xf0, 0x68,
	0x17, 0xd6, 0xb9, 0x48, 0x75, 0x84, 0x19, 0xa1, 0x96, 0x18, 0xe1, 0x57, 0x68, 0xc9, 0x10, 0x50,
	0x1f, 0x1a, 0x5c, 0x76, 0x4d, 0xa6, 0xa8, 0xac, 0x4e, 0xb1, 0x40, 0x19, 0xa9, 0x02, 0xf4, 0xf8,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x80, 0xc7, 0x94, 0x72, 0x0e, 0x00, 0x00,
}
