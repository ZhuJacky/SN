// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serviceratelimit.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LimitMode int32

const (
	//未知类型，用于兼容前面pb
	LimitMode_UnknownMode LimitMode = 0
	//全局类型，与限流server发生交互
	LimitMode_GlobalMode LimitMode = 1
	//本地类型，使用本地限流算法
	LimitMode_LocalMode LimitMode = 2
	//降级类型，因为无法连接限流server，导致必须使用本地限流算法
	LimitMode_DegradeMode LimitMode = 3
)

var LimitMode_name = map[int32]string{
	0: "UnknownMode",
	1: "GlobalMode",
	2: "LocalMode",
	3: "DegradeMode",
}

var LimitMode_value = map[string]int32{
	"UnknownMode": 0,
	"GlobalMode":  1,
	"LocalMode":   2,
	"DegradeMode": 3,
}

func (x LimitMode) String() string {
	return proto.EnumName(LimitMode_name, int32(x))
}

func (LimitMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8afef5ebb228fc4a, []int{0}
}

//被限流的统计
type LimitStat struct {
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	//限流次数
	PeriodTimes uint32 `protobuf:"varint,2,opt,name=period_times,json=periodTimes,proto3" json:"period_times,omitempty"`
	//限流原因，每种原因一个limitStat
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	//限流发生时处于哪种模式
	Mode                 LimitMode `protobuf:"varint,4,opt,name=mode,proto3,enum=v1.LimitMode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LimitStat) Reset()         { *m = LimitStat{} }
func (m *LimitStat) String() string { return proto.CompactTextString(m) }
func (*LimitStat) ProtoMessage()    {}
func (*LimitStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afef5ebb228fc4a, []int{0}
}

func (m *LimitStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LimitStat.Unmarshal(m, b)
}
func (m *LimitStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LimitStat.Marshal(b, m, deterministic)
}
func (m *LimitStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitStat.Merge(m, src)
}
func (m *LimitStat) XXX_Size() int {
	return xxx_messageInfo_LimitStat.Size(m)
}
func (m *LimitStat) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitStat.DiscardUnknown(m)
}

var xxx_messageInfo_LimitStat proto.InternalMessageInfo

func (m *LimitStat) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *LimitStat) GetPeriodTimes() uint32 {
	if m != nil {
		return m.PeriodTimes
	}
	return 0
}

func (m *LimitStat) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *LimitStat) GetMode() LimitMode {
	if m != nil {
		return m.Mode
	}
	return LimitMode_UnknownMode
}

//一个周期内，限流请求数量的情况
type LimitRequestsCount struct {
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	//总的请求次数
	TotalRequests uint32 `protobuf:"varint,2,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	//通过请求数
	PassRequests uint32 `protobuf:"varint,3,opt,name=pass_requests,json=passRequests,proto3" json:"pass_requests,omitempty"`
	//被拒请求数
	RejectRequests uint32 `protobuf:"varint,4,opt,name=reject_requests,json=rejectRequests,proto3" json:"reject_requests,omitempty"`
	//请求发生在什么模式下面
	Mode                 LimitMode `protobuf:"varint,5,opt,name=mode,proto3,enum=v1.LimitMode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LimitRequestsCount) Reset()         { *m = LimitRequestsCount{} }
func (m *LimitRequestsCount) String() string { return proto.CompactTextString(m) }
func (*LimitRequestsCount) ProtoMessage()    {}
func (*LimitRequestsCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afef5ebb228fc4a, []int{1}
}

func (m *LimitRequestsCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LimitRequestsCount.Unmarshal(m, b)
}
func (m *LimitRequestsCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LimitRequestsCount.Marshal(b, m, deterministic)
}
func (m *LimitRequestsCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitRequestsCount.Merge(m, src)
}
func (m *LimitRequestsCount) XXX_Size() int {
	return xxx_messageInfo_LimitRequestsCount.Size(m)
}
func (m *LimitRequestsCount) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitRequestsCount.DiscardUnknown(m)
}

var xxx_messageInfo_LimitRequestsCount proto.InternalMessageInfo

func (m *LimitRequestsCount) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *LimitRequestsCount) GetTotalRequests() uint32 {
	if m != nil {
		return m.TotalRequests
	}
	return 0
}

func (m *LimitRequestsCount) GetPassRequests() uint32 {
	if m != nil {
		return m.PassRequests
	}
	return 0
}

func (m *LimitRequestsCount) GetRejectRequests() uint32 {
	if m != nil {
		return m.RejectRequests
	}
	return 0
}

func (m *LimitRequestsCount) GetMode() LimitMode {
	if m != nil {
		return m.Mode
	}
	return LimitMode_UnknownMode
}

type ThresholdChange struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	OldThreshold         string               `protobuf:"bytes,2,opt,name=oldThreshold,proto3" json:"oldThreshold,omitempty"`
	NewThreshold         string               `protobuf:"bytes,3,opt,name=newThreshold,proto3" json:"newThreshold,omitempty"`
	Reason               string               `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ThresholdChange) Reset()         { *m = ThresholdChange{} }
func (m *ThresholdChange) String() string { return proto.CompactTextString(m) }
func (*ThresholdChange) ProtoMessage()    {}
func (*ThresholdChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afef5ebb228fc4a, []int{2}
}

func (m *ThresholdChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThresholdChange.Unmarshal(m, b)
}
func (m *ThresholdChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThresholdChange.Marshal(b, m, deterministic)
}
func (m *ThresholdChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdChange.Merge(m, src)
}
func (m *ThresholdChange) XXX_Size() int {
	return xxx_messageInfo_ThresholdChange.Size(m)
}
func (m *ThresholdChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdChange.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdChange proto.InternalMessageInfo

func (m *ThresholdChange) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ThresholdChange) GetOldThreshold() string {
	if m != nil {
		return m.OldThreshold
	}
	return ""
}

func (m *ThresholdChange) GetNewThreshold() string {
	if m != nil {
		return m.NewThreshold
	}
	return ""
}

func (m *ThresholdChange) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

//限流记录
type RateLimitRecord struct {
	//该条记录的唯一id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	//sdk标识
	SdkToken *SDKToken `protobuf:"bytes,2,opt,name=sdk_token,json=sdkToken,proto3" json:"sdk_token,omitempty"`
	//服务命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	//服务名
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	//规则id
	RuleId string `protobuf:"bytes,5,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	//规则生效集群
	Subset string `protobuf:"bytes,6,opt,name=subset,proto3" json:"subset,omitempty"`
	//限流器
	RateLimiter string `protobuf:"bytes,7,opt,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	//限流的接口，使用不同lables代表不同接口
	Labels string `protobuf:"bytes,8,opt,name=labels,proto3" json:"labels,omitempty"`
	//周期限流次数
	LimitStats []*LimitStat `protobuf:"bytes,9,rep,name=limit_stats,json=limitStats,proto3" json:"limit_stats,omitempty"`
	//阈值变化事件
	ThresholdChanges []*ThresholdChange `protobuf:"bytes,10,rep,name=threshold_changes,json=thresholdChanges,proto3" json:"threshold_changes,omitempty"`
	//该限流规则的总请求次数和通过请求次数，在这份PB之后，客户端不要继续上报该字段，使用下面的request_counts字段
	RequestsCount *LimitRequestsCount `protobuf:"bytes,11,opt,name=requests_count,json=requestsCount,proto3" json:"requests_count,omitempty"`
	//不同模式下，该限流规则的总请求次数和通过请求次数
	RequestCounts        []*LimitRequestsCount `protobuf:"bytes,12,rep,name=request_counts,json=requestCounts,proto3" json:"request_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RateLimitRecord) Reset()         { *m = RateLimitRecord{} }
func (m *RateLimitRecord) String() string { return proto.CompactTextString(m) }
func (*RateLimitRecord) ProtoMessage()    {}
func (*RateLimitRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8afef5ebb228fc4a, []int{3}
}

func (m *RateLimitRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitRecord.Unmarshal(m, b)
}
func (m *RateLimitRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitRecord.Marshal(b, m, deterministic)
}
func (m *RateLimitRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitRecord.Merge(m, src)
}
func (m *RateLimitRecord) XXX_Size() int {
	return xxx_messageInfo_RateLimitRecord.Size(m)
}
func (m *RateLimitRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitRecord proto.InternalMessageInfo

func (m *RateLimitRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RateLimitRecord) GetSdkToken() *SDKToken {
	if m != nil {
		return m.SdkToken
	}
	return nil
}

func (m *RateLimitRecord) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RateLimitRecord) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RateLimitRecord) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *RateLimitRecord) GetSubset() string {
	if m != nil {
		return m.Subset
	}
	return ""
}

func (m *RateLimitRecord) GetRateLimiter() string {
	if m != nil {
		return m.RateLimiter
	}
	return ""
}

func (m *RateLimitRecord) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *RateLimitRecord) GetLimitStats() []*LimitStat {
	if m != nil {
		return m.LimitStats
	}
	return nil
}

func (m *RateLimitRecord) GetThresholdChanges() []*ThresholdChange {
	if m != nil {
		return m.ThresholdChanges
	}
	return nil
}

func (m *RateLimitRecord) GetRequestsCount() *LimitRequestsCount {
	if m != nil {
		return m.RequestsCount
	}
	return nil
}

func (m *RateLimitRecord) GetRequestCounts() []*LimitRequestsCount {
	if m != nil {
		return m.RequestCounts
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.LimitMode", LimitMode_name, LimitMode_value)
	proto.RegisterType((*LimitStat)(nil), "v1.LimitStat")
	proto.RegisterType((*LimitRequestsCount)(nil), "v1.LimitRequestsCount")
	proto.RegisterType((*ThresholdChange)(nil), "v1.ThresholdChange")
	proto.RegisterType((*RateLimitRecord)(nil), "v1.RateLimitRecord")
}

func init() { proto.RegisterFile("serviceratelimit.proto", fileDescriptor_8afef5ebb228fc4a) }

var fileDescriptor_8afef5ebb228fc4a = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xfd, 0x39, 0xc9, 0xaf, 0xad, 0xc7, 0x89, 0x53, 0x16, 0xa9, 0xac, 0x2a, 0x24, 0xd2, 0x20,
	0x44, 0xe0, 0xe0, 0xaa, 0xe5, 0x8c, 0x84, 0xd4, 0x4a, 0x08, 0x51, 0x2e, 0xdb, 0x72, 0xb6, 0x36,
	0xde, 0x21, 0x35, 0xd9, 0x78, 0xc3, 0xee, 0xa6, 0xfd, 0x2c, 0x1c, 0xf9, 0x5e, 0x1c, 0xf8, 0x28,
	0x68, 0xc7, 0x76, 0xfe, 0x20, 0x21, 0xd4, 0x9b, 0xdf, 0xf3, 0x7b, 0xeb, 0x37, 0x3b, 0x33, 0x86,
	0x23, 0x87, 0xf6, 0xae, 0x2c, 0xd0, 0x4a, 0x8f, 0xba, 0x5c, 0x94, 0x3e, 0x5b, 0x5a, 0xe3, 0x0d,
	0xeb, 0xdc, 0x9d, 0x1d, 0xa7, 0x4e, 0xcd, 0xbd, 0x99, 0x63, 0x55, 0x73, 0xc7, 0xcf, 0x66, 0xc6,
	0xcc, 0x34, 0x9e, 0x12, 0x9a, 0xae, 0xbe, 0x9c, 0xfa, 0x72, 0x81, 0xce, 0xcb, 0xc5, 0xb2, 0x16,
	0x8c, 0xbf, 0x47, 0x10, 0x5f, 0x85, 0x43, 0xae, 0xbd, 0xf4, 0x2c, 0x83, 0x5e, 0x10, 0xf0, 0x68,
	0x14, 0x4d, 0x92, 0xf3, 0xe3, 0xac, 0x76, 0x67, 0xad, 0x3b, 0xbb, 0x69, 0xdd, 0x82, 0x74, 0xec,
	0x04, 0xfa, 0x4b, 0xb4, 0xa5, 0x51, 0x39, 0x9d, 0xcb, 0x3b, 0xa3, 0x68, 0x32, 0x10, 0x49, 0xcd,
	0x91, 0x98, 0x1d, 0xc1, 0x9e, 0x45, 0xe9, 0x4c, 0xc5, 0xbb, 0xa3, 0x68, 0x12, 0x8b, 0x06, 0xb1,
	0x13, 0xe8, 0x2d, 0x8c, 0x42, 0xde, 0x1b, 0x45, 0x93, 0xf4, 0x7c, 0x90, 0xdd, 0x9d, 0x65, 0x94,
	0xe3, 0x93, 0x51, 0x28, 0xe8, 0xd5, 0xf8, 0x67, 0x04, 0x8c, 0x38, 0x81, 0xdf, 0x56, 0xe8, 0xbc,
	0xbb, 0x30, 0xab, 0xea, 0xe1, 0x21, 0x5f, 0x40, 0xea, 0x8d, 0x97, 0x3a, 0xb7, 0xcd, 0x31, 0x4d,
	0xcc, 0x01, 0xb1, 0xed, 0xd9, 0xec, 0x39, 0x0c, 0x96, 0xd2, 0xb9, 0x8d, 0xaa, 0x4b, 0xaa, 0x7e,
	0x20, 0xd7, 0xa2, 0x97, 0x30, 0xb4, 0xf8, 0x15, 0x0b, 0xbf, 0x91, 0xf5, 0x48, 0x96, 0xd6, 0xf4,
	0x5a, 0xd8, 0x96, 0xf7, 0xff, 0xdf, 0xcb, 0xfb, 0x11, 0xc1, 0xf0, 0xe6, 0xd6, 0xa2, 0xbb, 0x35,
	0x5a, 0x5d, 0xdc, 0xca, 0x6a, 0x86, 0x0f, 0xae, 0x6d, 0x0c, 0x7d, 0xa3, 0xd5, 0xfa, 0x14, 0xaa,
	0x2c, 0x16, 0x3b, 0x5c, 0xd0, 0x54, 0x78, 0xbf, 0xd1, 0xd4, 0x7d, 0xd8, 0xe1, 0xb6, 0xba, 0xd4,
	0xdb, 0xee, 0xd2, 0xf8, 0x57, 0x17, 0x86, 0x42, 0x7a, 0x6c, 0xda, 0x50, 0x18, 0xab, 0x58, 0x0a,
	0x9d, 0x52, 0x51, 0xc2, 0x58, 0x74, 0x4a, 0xc5, 0x5e, 0x41, 0xec, 0xd4, 0x3c, 0xa7, 0xb1, 0xa3,
	0x00, 0xc9, 0x79, 0x3f, 0xd4, 0x7b, 0x7d, 0xf9, 0xf1, 0x26, 0x70, 0xe2, 0xc0, 0xa9, 0x39, 0x3d,
	0xb1, 0xa7, 0x10, 0x57, 0x72, 0x81, 0x6e, 0x29, 0x0b, 0x6c, 0x72, 0x6c, 0x08, 0xc6, 0x61, 0xbf,
	0x19, 0xed, 0x26, 0x45, 0x0b, 0xd9, 0x13, 0xd8, 0xb7, 0x2b, 0x8d, 0x79, 0xa9, 0xe8, 0x42, 0x43,
	0xbe, 0x95, 0xc6, 0x0f, 0x94, 0xdb, 0xad, 0xa6, 0x0e, 0x3d, 0xdf, 0xab, 0xf9, 0x1a, 0x85, 0xc1,
	0x0c, 0xeb, 0x91, 0xd3, 0x7e, 0xa0, 0xe5, 0xfb, 0xf4, 0x36, 0xb1, 0x6d, 0x29, 0x68, 0x83, 0x55,
	0xcb, 0x29, 0x6a, 0xc7, 0x0f, 0x6a, 0x6b, 0x8d, 0x58, 0x06, 0x09, 0xb9, 0x72, 0xe7, 0xa5, 0x77,
	0x3c, 0x1e, 0x75, 0x27, 0xc9, 0x56, 0x03, 0xc3, 0x9e, 0x08, 0xd0, 0xed, 0xa3, 0x63, 0xef, 0xe0,
	0x91, 0x6f, 0xef, 0x31, 0x2f, 0xa8, 0x8d, 0x8e, 0x03, 0xb9, 0x1e, 0x07, 0xd7, 0x1f, 0x2d, 0x16,
	0x87, 0x7e, 0x97, 0x70, 0xec, 0x2d, 0xa4, 0xed, 0x34, 0xe5, 0x45, 0x18, 0x71, 0x9e, 0xd0, 0x2d,
	0x1e, 0xad, 0x3f, 0xba, 0xb3, 0x00, 0x62, 0x60, 0x77, 0xf6, 0x61, 0x63, 0xaf, 0xdd, 0x8e, 0xf7,
	0xe9, 0xeb, 0xff, 0xb2, 0x13, 0x72, 0xaf, 0xaf, 0x9a, 0x1f, 0x40, 0x98, 0x4c, 0x36, 0x84, 0xe4,
	0x73, 0x35, 0xaf, 0xcc, 0x7d, 0x15, 0xe0, 0xe1, 0x7f, 0x2c, 0x05, 0x78, 0xaf, 0xcd, 0x54, 0x6a,
	0xc2, 0x11, 0x1b, 0x40, 0x7c, 0x65, 0x8a, 0x06, 0x76, 0x82, 0xfe, 0x12, 0x67, 0x56, 0x2a, 0x24,
	0xa2, 0x3b, 0xdd, 0xa3, 0x51, 0x7d, 0xf3, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x22, 0x01, 0xd2, 0xef,
	0xa5, 0x04, 0x00, 0x00,
}
