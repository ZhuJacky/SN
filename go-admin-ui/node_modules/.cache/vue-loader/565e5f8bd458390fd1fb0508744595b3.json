{"remainingRequest":"D:\\project\\SN\\go-admin-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\project\\SN\\go-admin-ui\\src\\components\\UploadExcel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\project\\SN\\go-admin-ui\\src\\components\\UploadExcel\\index.vue","mtime":1656928972155},{"path":"D:\\project\\SN\\go-admin-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656929009565},{"path":"D:\\project\\SN\\go-admin-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1656929009473},{"path":"D:\\project\\SN\\go-admin-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656929009565},{"path":"D:\\project\\SN\\go-admin-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1656929012008}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgWExTWCBmcm9tICd4bHN4Jw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIHByb3BzOiB7DQogICAgYmVmb3JlVXBsb2FkOiBGdW5jdGlvbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZQ0KICAgIG9uU3VjY2VzczogRnVuY3Rpb24vLyBlc2xpbnQtZGlzYWJsZS1saW5lDQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGxvYWRpbmc6IGZhbHNlLA0KICAgICAgZXhjZWxEYXRhOiB7DQogICAgICAgIGhlYWRlcjogbnVsbCwNCiAgICAgICAgcmVzdWx0czogbnVsbA0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGdlbmVyYXRlRGF0YSh7IGhlYWRlciwgcmVzdWx0cyB9KSB7DQogICAgICB0aGlzLmV4Y2VsRGF0YS5oZWFkZXIgPSBoZWFkZXINCiAgICAgIHRoaXMuZXhjZWxEYXRhLnJlc3VsdHMgPSByZXN1bHRzDQogICAgICB0aGlzLm9uU3VjY2VzcyAmJiB0aGlzLm9uU3VjY2Vzcyh0aGlzLmV4Y2VsRGF0YSkNCiAgICB9LA0KICAgIGhhbmRsZURyb3AoZSkgew0KICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKQ0KICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpDQogICAgICBpZiAodGhpcy5sb2FkaW5nKSByZXR1cm4NCiAgICAgIGNvbnN0IGZpbGVzID0gZS5kYXRhVHJhbnNmZXIuZmlsZXMNCiAgICAgIGlmIChmaWxlcy5sZW5ndGggIT09IDEpIHsNCiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcignT25seSBzdXBwb3J0IHVwbG9hZGluZyBvbmUgZmlsZSEnKQ0KICAgICAgICByZXR1cm4NCiAgICAgIH0NCiAgICAgIGNvbnN0IHJhd0ZpbGUgPSBmaWxlc1swXSAvLyBvbmx5IHVzZSBmaWxlc1swXQ0KDQogICAgICBpZiAoIXRoaXMuaXNFeGNlbChyYXdGaWxlKSkgew0KICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCdPbmx5IHN1cHBvcnRzIHVwbG9hZCAueGxzeCwgLnhscywgLmNzdiBzdWZmaXggZmlsZXMnKQ0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgIH0NCiAgICAgIHRoaXMudXBsb2FkKHJhd0ZpbGUpDQogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpDQogICAgICBlLnByZXZlbnREZWZhdWx0KCkNCiAgICB9LA0KICAgIGhhbmRsZURyYWdvdmVyKGUpIHsNCiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCkNCiAgICAgIGUucHJldmVudERlZmF1bHQoKQ0KICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5Jw0KICAgIH0sDQogICAgaGFuZGxlVXBsb2FkKCkgew0KICAgICAgdGhpcy4kcmVmc1snZXhjZWwtdXBsb2FkLWlucHV0J10uY2xpY2soKQ0KICAgIH0sDQogICAgaGFuZGxlQ2xpY2soZSkgew0KICAgICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlcw0KICAgICAgY29uc3QgcmF3RmlsZSA9IGZpbGVzWzBdIC8vIG9ubHkgdXNlIGZpbGVzWzBdDQogICAgICBpZiAoIXJhd0ZpbGUpIHJldHVybg0KICAgICAgdGhpcy51cGxvYWQocmF3RmlsZSkNCiAgICB9LA0KICAgIHVwbG9hZChyYXdGaWxlKSB7DQogICAgICB0aGlzLiRyZWZzWydleGNlbC11cGxvYWQtaW5wdXQnXS52YWx1ZSA9IG51bGwgLy8gZml4IGNhbid0IHNlbGVjdCB0aGUgc2FtZSBleGNlbA0KDQogICAgICBpZiAoIXRoaXMuYmVmb3JlVXBsb2FkKSB7DQogICAgICAgIHRoaXMucmVhZGVyRGF0YShyYXdGaWxlKQ0KICAgICAgICByZXR1cm4NCiAgICAgIH0NCiAgICAgIGNvbnN0IGJlZm9yZSA9IHRoaXMuYmVmb3JlVXBsb2FkKHJhd0ZpbGUpDQogICAgICBpZiAoYmVmb3JlKSB7DQogICAgICAgIHRoaXMucmVhZGVyRGF0YShyYXdGaWxlKQ0KICAgICAgfQ0KICAgIH0sDQogICAgcmVhZGVyRGF0YShyYXdGaWxlKSB7DQogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlDQogICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gew0KICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpDQogICAgICAgIHJlYWRlci5vbmxvYWQgPSBlID0+IHsNCiAgICAgICAgICBjb25zdCBkYXRhID0gZS50YXJnZXQucmVzdWx0DQogICAgICAgICAgY29uc3Qgd29ya2Jvb2sgPSBYTFNYLnJlYWQoZGF0YSwgeyB0eXBlOiAnYXJyYXknIH0pDQogICAgICAgICAgY29uc3QgZmlyc3RTaGVldE5hbWUgPSB3b3JrYm9vay5TaGVldE5hbWVzWzBdDQogICAgICAgICAgY29uc3Qgd29ya3NoZWV0ID0gd29ya2Jvb2suU2hlZXRzW2ZpcnN0U2hlZXROYW1lXQ0KICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMuZ2V0SGVhZGVyUm93KHdvcmtzaGVldCkNCiAgICAgICAgICBjb25zdCByZXN1bHRzID0gWExTWC51dGlscy5zaGVldF90b19qc29uKHdvcmtzaGVldCkNCiAgICAgICAgICB0aGlzLmdlbmVyYXRlRGF0YSh7IGhlYWRlciwgcmVzdWx0cyB9KQ0KICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlDQogICAgICAgICAgcmVzb2x2ZSgpDQogICAgICAgIH0NCiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHJhd0ZpbGUpDQogICAgICB9KQ0KICAgIH0sDQogICAgZ2V0SGVhZGVyUm93KHNoZWV0KSB7DQogICAgICBjb25zdCBoZWFkZXJzID0gW10NCiAgICAgIGNvbnN0IHJhbmdlID0gWExTWC51dGlscy5kZWNvZGVfcmFuZ2Uoc2hlZXRbJyFyZWYnXSkNCiAgICAgIGxldCBDDQogICAgICBjb25zdCBSID0gcmFuZ2Uucy5yDQogICAgICAvKiBzdGFydCBpbiB0aGUgZmlyc3Qgcm93ICovDQogICAgICBmb3IgKEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHsgLyogd2FsayBldmVyeSBjb2x1bW4gaW4gdGhlIHJhbmdlICovDQogICAgICAgIGNvbnN0IGNlbGwgPSBzaGVldFtYTFNYLnV0aWxzLmVuY29kZV9jZWxsKHsgYzogQywgcjogUiB9KV0NCiAgICAgICAgLyogZmluZCB0aGUgY2VsbCBpbiB0aGUgZmlyc3Qgcm93ICovDQogICAgICAgIGxldCBoZHIgPSAnVU5LTk9XTiAnICsgQyAvLyA8LS0gcmVwbGFjZSB3aXRoIHlvdXIgZGVzaXJlZCBkZWZhdWx0DQogICAgICAgIGlmIChjZWxsICYmIGNlbGwudCkgaGRyID0gWExTWC51dGlscy5mb3JtYXRfY2VsbChjZWxsKQ0KICAgICAgICBoZWFkZXJzLnB1c2goaGRyKQ0KICAgICAgfQ0KICAgICAgcmV0dXJuIGhlYWRlcnMNCiAgICB9LA0KICAgIGlzRXhjZWwoZmlsZSkgew0KICAgICAgcmV0dXJuIC9cLih4bHN4fHhsc3xjc3YpJC8udGVzdChmaWxlLm5hbWUpDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAafile":"index.vue","sourceRoot":"src/components/UploadExcel","sourcesContent":["<template>\r\n  <div>\r\n    <input ref=\"excel-upload-input\" class=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\" @change=\"handleClick\">\r\n    <div class=\"drop\" @drop=\"handleDrop\" @dragover=\"handleDragover\" @dragenter=\"handleDragover\">\r\n      Drop excel file here or\r\n      <el-button :loading=\"loading\" style=\"margin-left:16px;\" size=\"mini\" type=\"primary\" @click=\"handleUpload\">\r\n        Browse\r\n      </el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport XLSX from 'xlsx'\r\n\r\nexport default {\r\n  props: {\r\n    beforeUpload: Function, // eslint-disable-line\r\n    onSuccess: Function// eslint-disable-line\r\n  },\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      excelData: {\r\n        header: null,\r\n        results: null\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    generateData({ header, results }) {\r\n      this.excelData.header = header\r\n      this.excelData.results = results\r\n      this.onSuccess && this.onSuccess(this.excelData)\r\n    },\r\n    handleDrop(e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      if (this.loading) return\r\n      const files = e.dataTransfer.files\r\n      if (files.length !== 1) {\r\n        this.$message.error('Only support uploading one file!')\r\n        return\r\n      }\r\n      const rawFile = files[0] // only use files[0]\r\n\r\n      if (!this.isExcel(rawFile)) {\r\n        this.$message.error('Only supports upload .xlsx, .xls, .csv suffix files')\r\n        return false\r\n      }\r\n      this.upload(rawFile)\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n    },\r\n    handleDragover(e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      e.dataTransfer.dropEffect = 'copy'\r\n    },\r\n    handleUpload() {\r\n      this.$refs['excel-upload-input'].click()\r\n    },\r\n    handleClick(e) {\r\n      const files = e.target.files\r\n      const rawFile = files[0] // only use files[0]\r\n      if (!rawFile) return\r\n      this.upload(rawFile)\r\n    },\r\n    upload(rawFile) {\r\n      this.$refs['excel-upload-input'].value = null // fix can't select the same excel\r\n\r\n      if (!this.beforeUpload) {\r\n        this.readerData(rawFile)\r\n        return\r\n      }\r\n      const before = this.beforeUpload(rawFile)\r\n      if (before) {\r\n        this.readerData(rawFile)\r\n      }\r\n    },\r\n    readerData(rawFile) {\r\n      this.loading = true\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader()\r\n        reader.onload = e => {\r\n          const data = e.target.result\r\n          const workbook = XLSX.read(data, { type: 'array' })\r\n          const firstSheetName = workbook.SheetNames[0]\r\n          const worksheet = workbook.Sheets[firstSheetName]\r\n          const header = this.getHeaderRow(worksheet)\r\n          const results = XLSX.utils.sheet_to_json(worksheet)\r\n          this.generateData({ header, results })\r\n          this.loading = false\r\n          resolve()\r\n        }\r\n        reader.readAsArrayBuffer(rawFile)\r\n      })\r\n    },\r\n    getHeaderRow(sheet) {\r\n      const headers = []\r\n      const range = XLSX.utils.decode_range(sheet['!ref'])\r\n      let C\r\n      const R = range.s.r\r\n      /* start in the first row */\r\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\r\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\r\n        /* find the cell in the first row */\r\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n      }\r\n      return headers\r\n    },\r\n    isExcel(file) {\r\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.excel-upload-input{\r\n  display: none;\r\n  z-index: -9999;\r\n}\r\n.drop{\r\n  border: 2px dashed #bbb;\r\n  width: 600px;\r\n  height: 160px;\r\n  line-height: 160px;\r\n  margin: 0 auto;\r\n  font-size: 24px;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  color: #bbb;\r\n  position: relative;\r\n}\r\n</style>\r\n"]}]}